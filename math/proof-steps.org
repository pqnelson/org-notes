#+TITLE: Proof Steps
#+AUTHOR: Alex Nelson
#+EMAIL: pqnelson@gmail.com
#+DATE: <2020-12-32T08:31:00-08:00>
#+LANGUAGE: en
#+OPTIONS: H:5
#+HTML_DOCTYPE: html5
# Created Sunday December 13, 2020 at  8:31AM
#+INCLUDE: ../org-macros.org
#+HTML_LINK_UP: ./index.html
#+HTML_LINK_HOME: ../index.html
#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="../css/stylesheet.css" />

* Definition
:PROPERTIES:
:CUSTOM_ID: h-f907a02c-3947-40f7-a89d-ca2e4d86b81f
:END:

In formal proof sketches, we can limit our "logical vocabulary" to
about a half-dozen "proof steps". These correspond to certain
specific inference rules in natural deduction. A few are "syntactic
sugar" combining multiple steps into one.

We define the semantics of proof steps by means of "proof
skeletons", which are equivalent to relating the step to a rule of
inference. The proof skeleton transforms a goal until the theorem
is proven.

** Formal Grammar
:PROPERTIES:
:CUSTOM_ID: h-53077d39-c377-4a30-a09c-70f6c158fdbd
:END:

Let's consider the formal grammar for formal proof
sketches. Following Freek Wiedijk's "Mathematical Vernacular", we
leave informal the following syntactic categories:

- label :: Equation numbers, theorem numbers, definition numbers,
  etc., are all left informally understood. LaTeX usually takes
  care of this for us automatically.
- variable :: A first-order variable term. Indeed, all variables in first-order
  logic are terms.
- term :: A logical term or a logical function (i.e., a term
  parametrized by other terms or variables). Intuitively, terms
  correspond to "mathematical objects" like numbers or vectors or
  whatever.
- formula :: A first-order logical formula, which is either true or
  false. We ultimately are trying to prove a formula with our proof
  sketches. These are intuitively "propositions".

Using Wirth syntax notation:

#+ATTR_HTML: :id grammar
#+begin_example
statement = proposition justification ";"
          | term "=" term justification
                {"=" term justification} .

proposition = [ label ":" ] formula .

justification = empty
              | simple-justification
              | "proof" { step } [ cases ] "end" .

simple-justification = "by" label { "," label } .

step = statement
     | "thus" statement
     | "let" variable { "," variable } ";"
     | "assume" proposition ";"
     | "consider" variable {"," variable} "such that" proposition justification ";"
     | "take" term {"," term} ";"

cases = "per cases" simple-justification ";" {"suppose" proposition ";" {step}}
#+end_example

Note that justifications allow for nested proofs.

* Steps
:PROPERTIES:
:CUSTOM_ID: h-3c0fc0e4-a5f6-49f4-a913-7585fa0b4358
:END:
** =let=, forall-introduction
:PROPERTIES:
:CUSTOM_ID: h-c8be4c51-ce97-433e-97be-ffe4a763c5ed
:END:

The proof skeleton for this step looks like:

#+ATTR_HTML: :id let
#+begin_example
<proof of 'forall x, P(x)'> ::=
    <preliminary steps>
    let y;
    <proof of P(y)>
#+end_example

This corresponds to the inference rule in natural deduction
$\forall$-introduction:
\begin{equation}
\frac{\Gamma, y\vdash P(y)}{\Gamma\vdash\forall x, P(x)}\mbox{{\tt let}\ $y$}
\end{equation}

** =assume=
:PROPERTIES:
:CUSTOM_ID: h-292b4f0e-6142-45b3-b1b7-2a89d33c17b1
:END:
*** implies-intro
:PROPERTIES:
:CUSTOM_ID: h-c94efdcd-f2fb-4562-a9ce-702b424476b0
:END:

When we want to prove a goal of the form $A\implies B$, we begin by
stipulating the hypothesis $A$ holds. That is to say, we =assume=
$A$.

#+ATTR_HTML: :id assume
#+begin_example
<proof of $A\implies B$> ::=
    <preliminary steps>
    assume $A$;
    <proof of $B$>
#+end_example

*** not-introduction
:PROPERTIES:
:CUSTOM_ID: h-53117430-d9c1-4395-9d65-fc9c4c76b4b9
:END:

We can take advantage of the logical equivalence of $\neg A$ with
$A\implies\bot$. That is, if we want to prove $\neg A$, we
stipulate $A$ is true, then demonstrate this leads to a
contradiction. We're forced to conclude that our stipulation must
be wrong, and that $A$ must be false (i.e., $\neg A$ is true).

#+ATTR_HTML: :id assume-negation
#+begin_example
<proof of ¬A> ::=
    <preliminary steps>
    assume A;
    <prove a contradiction from A>
#+end_example

*** Reductio ad Absurdum
:PROPERTIES:
:CUSTOM_ID: h-56f7caee-a8bd-4195-b0a9-6b2a340e8be5
:END:

The other way to look at this is, if assuming $A$ and deriving a
contradiction implies $\neg A$, then assuming $\neg A$ and deriving
a contradiction implies $A$. This is the /reductio ad absurdum/
rule. Usually I write in parentheses "=assume= $A$ (for contradiction)".

#+ATTR_HTML: :id assume-reductio
#+begin_example
<proof of A> ::=
    <preliminary steps>
    assume ¬A;
    <prove a contradiction from ¬A>
#+end_example

** =thus=, and-introduction
:PROPERTIES:
:CUSTOM_ID: h-f0c1272f-de5f-4cc9-a977-a8c14a897de1
:END:

When we have multiple goals we want to prove conjoined together
(i.e., our goal looks like $A\land B$), and we have proven $A$, we
can update our goal to reflect this by writing "=thus= $A$".

This is the first proof step which requires justification. Why?
Well, in natural deduction, this corresponds to the inference rule
\begin{equation}
\frac{\Gamma\vdash A,\qquad \Gamma\vdash B}{\Gamma\vdash A\land B}.
\end{equation}
There are two proof obligations above the inference line, the
upper-left obligation $\Gamma\vdash A$ is referenced as the
justification for the step. The upper-right obligation is the new
proof goal.

#+ATTR_HTML: :id and-intro
#+begin_example
<proof of A and B> ::=
    <preliminary steps>
    thus A by ...;
    <proof of B>
#+end_example

** =per cases=, or-elimination
:PROPERTIES:
:CUSTOM_ID: h-bbde6cf5-e3e4-4d28-b56a-d8a6f1565b88
:END:

When we want to prove a claim by cases. That is, we have
established that $A_{1}\lor\dots\lor A_{n}$, but we want to prove
$B$. If we can prove $A_{i}$ implies $B$ for each $i$, then we are golden.

The natural deduction rule is of the form
\begin{equation}
\frac{\Gamma\vdash A_{1}\lor\dots\lor A_{n},\qquad \Gamma,A_{1}\vdash B,\quad\dots\quad, \Gamma,A_{n}\vdash B}{\Gamma\vdash B}
\end{equation}
The upper-left proof obligation is used to justify the =per cases= step.

#+ATTR_HTML: :id or-intro
#+begin_example
<proof of B> ::=
    <preliminary steps>
    per cases by ...;
    suppose A_{1};
        <proof of B from A_{1}>
    <...>
    suppose A_{n};
        <proof of B from A_{n}>
#+end_example

Each =suppose= block acts as if we temporarily "=assume= $A_{i}$"
for the duration of the block.

** =consider=, exists-elimination
:PROPERTIES:
:CUSTOM_ID: h-4b92b0ba-c2e7-4b7f-813f-db15f44a4f7c
:END:

If we have proven "$\exists x, P[x]$", then we may take a "witness"
or term $t$ which satisfies the predicate. In other words, we may
say we may =consider= $t$ =such that= $P[t]$ =by= the proven claim
we're using.

The natural deduction inference rule corresponding to this step is
\begin{equation}
\frac{\Gamma\vdash\exists x.P[x],\qquad\Gamma,x,P[x]\vdash A}{\Gamma\vdash A}
\end{equation}
The top-left subgoal is the justification for the proof step.

#+ATTR_HTML: :id exists-elim
#+begin_example
<proof of A> ::=
    <preliminary steps>
    consider t such that P[t] (proof ... end | by ...);
    <proof of A>
#+end_example

** =take=, exists-intro
:PROPERTIES:
:CUSTOM_ID: h-0e66da0e-d02c-4dd5-9009-9c31ec4b88b8
:END:

When we want to prove a claim of the form "$\exists x, P[x]$", the
first thing we do is take a term $t$ then prove it satisfies
$P[t]$.

In natural deduction, this corresponds to $\exists$-intro:
\begin{equation}
\frac{\Gamma\vdash P[a]}{\Gamma\vdash \exists x, P[x]}
\end{equation}

#+ATTR_HTML: :id exists-intro
#+begin_example
<proof of exists x such that P[x]> ::=
    <preliminary steps>
    take a;
    <proof of P[a]>
#+end_example

* Syntactic Sugar
:PROPERTIES:
:CUSTOM_ID: h-443bfb2e-72f7-4c79-a3a8-90b179608fe8
:END:
** =then= prefixes
:PROPERTIES:
:CUSTOM_ID: h-e82eeffb-df96-4f05-ad6f-c9b08e37cafb
:END:

For steps requiring justification, if we use the previous step as
part of the justification, we can prefix the step with =then=. For
example:

#+ATTR_HTML: :id then-step
#+begin_example
    <step>
    then consider t such that P[t];
#+end_example
The justification for the =consider= step consists of just one
reference, namely, the previous step.

** ~hence~ = ~then thus~
:PROPERTIES:
:CUSTOM_ID: h-ff7328a3-1ac3-44d8-8421-4fab0875eb35
:END:

There is some awkwardness to writing "Then thus". Instead, we write
"hence". It is an abbreviation for "then thus". They are literal
synonyms.

** ~given = assume + then consider~
:PROPERTIES:
:CUSTOM_ID: h-98017bb4-159d-4221-97a0-36601629712c
:END:

We also routinely write steps of the form

#+ATTR_HTML: :id ex-assume-then-consider
#+begin_example
    assume exists x such that [x];
    then consider t such that P[t];
#+end_example

This is rather wordy. We contract the two steps into one:

#+ATTR_HTML: :id given
#+begin_example
    given t such that P[t];
#+end_example

** =set=
:PROPERTIES:
:CUSTOM_ID: h-02599ff2-cf14-454a-be44-e46357f1b4bf
:END:

When we've already introduced an identifier (a symbol used for a
term or variable) in a proof, but we want to re-use somewhere later
in the proof, we can flag this to the reader by writing:

#+ATTR_HTML: :id set
#+begin_example
"set" variable "=" term ";"
#+end_example

** =thesis= keyword
:PROPERTIES:
:CUSTOM_ID: h-6c8990af-64e7-4182-9121-13144eb7f6a9
:END:

When we start a =proof= environment, the initial goal we're trying
to prove is stored in the =thesis= reserved keyword. In Mizar, it
has become idiomatic to conclude a proof by writing =thus thesis=
or =hence thesis=.

* Conventions
:PROPERTIES:
:CUSTOM_ID: h-fd84a1a8-251f-4c22-b557-6c4073e6a86c
:END:

** Proving $A \iff B$
:PROPERTIES:
:CUSTOM_ID: h-aadd0d9c-fcfe-4f2c-a2d2-460e6b7f46a2
:END:

One of the conventions I've adopted is to use the proof skeleton:

#+ATTR_HTML: :id iff
#+begin_example
<proof of A iff B> ::=
    <preliminary steps>
    thus A implies B
    proof
        assume A;
        <proof of B>
    end
    thus B implies A
    proof
        assume B;
        <proof of A>
    end
    hence thesis;
#+end_example

This is technically correct, it's certainly valid Mizar. A more verbose
way would be to do something like:

#+ATTR_HTML: :id iff2
#+begin_example
<proof of A iff B> ::=
    <preliminary steps>
    (1) A implies B
    proof
        assume A;
        <proof of B>
    end;
    (2) B implies A
    proof
        assume B;
        <proof of A>
    end;
    thus A iff B by (1), (2);
#+end_example


* References
:PROPERTIES:
:CUSTOM_ID: h-ec240c62-5e72-4270-b7bf-02c24604b297
:END:

Most of this comes from Freek Wiedijk's work and Mizar.

- Freek Wiedijk,
  "Mathematical Vernacular".
  Unpublished manuscript, undated, [[https://www.cs.ru.nl/~freek/notes/mv.pdf][PDF]]
- Freek Wiedijk,
  "Formal Proof Sketches".
  In S. Berardi, M. Coppo, F. Damiani (eds),
  {{{book-title(Types for Proofs and Programs: Third International Workshop, TYPES 2003)}}}
  Torino, Italy, Springer LNCS 3085, 378--393, 2004.
  See especially section 3. [[https://www.cs.ru.nl/F.Wiedijk/pubs/sketches2.pdf][PDF]]
- For an independent derivation of a remarkably similar foundations, see
  [[https://math.stackexchange.com/a/1684204/31693][answer]] in math stackexchange thread from  user21820 
