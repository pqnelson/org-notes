#+TITLE: Multiple Dispatch
#+AUTHOR: Alex Nelson
#+EMAIL: pqnelson@gmail.com
#+DATE: <2020-12-05T14:34:00-08:00>
#+LANGUAGE: en
#+OPTIONS: H:5
#+HTML_DOCTYPE: html5
# Created Saturday December  5, 2020 at  2:34PM
#+HTML_LINK_UP: ./index.html
#+HTML_LINK_HOME: ../../index.html
#+INCLUDE: "../../org-macros.org"
#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="../../css/stylesheet.css" />

* Introduction
:PROPERTIES:
:CUSTOM_ID: h-bd2ef5b1-9d64-4af3-bc7d-b4ac47bbb71f
:END:

Multimethods, or multiple dispatch, is a feature of Common
Lisp. The exact details depend on the Common Lisp Object System.

* Common Lisp
:PROPERTIES:
:CUSTOM_ID: h-2080631e-8f92-4c3a-8c7d-87e6dff29dd6
:END:

We can have multiple inheritance in Common Lisp, which complicates
things. If we avoid multiple inheritance, we can use =defgeneric=
to create a generic function, and provide a =defmethod=
implementation for each data type or class.

The dispatch mechanism proceeds as follows:

1. Compute the list of applicable methods
2. If no method is applicable, signal an error
3. Sort the applicable methods in order of specificity
4. Invoke the most specific method.

* Predicate Dispatching
:PROPERTIES:
:CUSTOM_ID: h-8dcbb43f-512f-40d7-8445-d6acdf974b8c
:END:

Apparently more sophisticated than Common Lisp's builtin
=defgeneric= and =defmethod=. Predicates are used to determine if a
generic method applies to its arguments, and method =m1= overrides
=m2= if the predicate for =m1= implies =m2=. This relationship is
computed at compile-time.

One advantage predicate dispatching has over multiple dispatch,
predicate dispatching allows for some degree of pattern
matching. This is impossible with multiple dispatching.

*See also:*

- ~filtered-functions~ ([[https://github.com/pcostanza/filtered-functions][github]]) for an implementation of predicate
  dispatching for Common Lisp (see also [[http://www.p-cos.net/documents/filtered-dispatch.pdf][associated paper]])

* References
:PROPERTIES:
:CUSTOM_ID: h-85d95622-f009-496b-b4e2-297d1d78dbea
:END:

- Ernst, Kaplan, Chambers, "Predicate Dispatching: A Unified Theory
  of Dispatch". In ECOOP'98, LNCS vol 1445, Springer, pp 186-211
  (1998). [[https://homes.cs.washington.edu/~mernst/pubs/dispatching-ecoop98-abstract.html][Eprint]].
- Aaron Mark Ucko, "Predicate Dispatching in the Common Lisp Object
  System". MIT AI Tech Report 2001-006, dated June 2001.
  [[https://dspace.mit.edu/handle/1721.1/7071][Eprint]].
- [[https://wiki.c2.com/?PredicateDispatching][C2 WikiPage]] on Predicate Dispatching

** Generics
:PROPERTIES:
:CUSTOM_ID: h-ffd9084e-5c5f-4c54-972d-7a56ab05cf9e
:END:

- https://github.com/alex-gutev/generic-cl
- https://github.com/digikar99/polymorphic-functions