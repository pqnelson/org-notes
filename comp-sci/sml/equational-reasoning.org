#+TITLE: Equational Reasoning in Standard ML
#+AUTHOR: Alex Nelson
#+EMAIL: pqnelson@gmail.com
#+DATE: <2021-07-10T14:36:36-07:00>
#+LANGUAGE: en
#+OPTIONS: H:5
#+HTML_DOCTYPE: html5
#+INCLUDE: ../../org-macros.org
#+HTML_LINK_UP: ./index.html
#+HTML_LINK_HOME: ../../index.html
#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="../../css/stylesheet.css" />
# Created Saturday July 10, 2021 at  2:36PM

* Overview
:PROPERTIES:
:CUSTOM_ID: h-b5b06cfd-93e5-4383-8b89-f4f872d9ee67
:END:

The excitement with statically-typed functional programming is that we
can reason about it. The technical term is "equational reasoning" and
resembles Dijkstra's [[https://en.wikipedia.org/wiki/Structured_derivations][structured derivations]]. For purely functional
languages, we can use equational reasoning for the entire program.

#+begin_remark
The critical property enabling us to reason about functional programs is
*referential transparency.* The only two features of Standard ML which
hinders referential transparency: IO, and references. (IO is a thorny
issue in functional programming.)
#+end_remark

Since Standard ML has some impure aspects, and has eager evaluation,
there are some subtleties about how to reason about ML code.

*Moral:* Well-written functional code corresponds to its own correctness
proof.

* Definitions
:PROPERTIES:
:CUSTOM_ID: h-eb7b240e-e63c-4035-89a9-2c55052df004
:END:

We have an equivalence, in ascii written ~==~ (so ~e1 == e2 : T~ is a
predicate on two closed expressions ~e1~ and ~e2~, both have the same
type ~T~). In math, on paper, we write $e_{1}\cong e_{2} : \tau$. We
usually suppress the type.

- ~e value~ means that ~e~ is a value; not every expression has a value
  (e.g., ~5 div 0~).
  - For now, values may be described inductively as:
    - The basic types like numbers, strings, characters,
    - applications of datatype constructors to values,
  - More generally, "values" would be /syntactical values/ or
    "non-expansive expressions" as found in chapter 4 of the definition
    of Standard ML (1997 revision).
- ~e valuable~ mean "There exists a ~v~ such that ~v value~ and ~e == v~"
  - If an expression raises an exception, then it is not valuable.
- ~f : T1 -> T2, f total~ means "For all values ~v1 : T1~, if ~v1 value~,
  then ~(f v2) valuable~."
  - Examples: ~(fn s => s)~, ~op +~, ~Int.toString~
  - Non-Examples: ~div~, ~exp~
- It's common to abuse language and write: "for all values ~e : T~..."
  or even "for all ~v : T~ ..." to mean "for all ~e : T~, if ~e value~,
  then...".
  Specifically, this means a quantifier over arbitrary expressions must
  be explicitly indicates as, "For all expressions ~e : T~ ...".
- We write ~e'[e/x]~ for substitution of ~e~ for ~x~ in ~e'~.
- *Reduction* of an expression is written ~e ==> e'~ (or on paper as
  $e \Longrightarrow e'$) and is defined using the operational semantics
  of Standard ML. It does not necessarily correspond to the steps the
  computer takes when evaluating a Standard ML expression (since
  optimizations may occur, etc.).
  - We write $e\stackrel{k}{\Longrightarrow} e'$ for "$e$ reduces to
    $e'$ in $k$ steps of reduction"
  - If we have $e\Longrightarrow e'$, then we mean "$e$ reduces to $e'$
    in zero or more steps of reduction"
- *Evaluation* of an expression is denoted $e\hookrightarrow v$
  - Evaluation and reduction are related in the sense that if $e\hookrightarrow v$
    then either $e$ is $v$ already or $e\stackrel{1}{\Longrightarrow}e_{1}\Longrightarrow v$
- We write ~e |-> e'~ for one step of calculation or reduction,
  ~e |=> e''~ for multiple parallel steps of calculation or reduction,
  and ~e ==> e'''~ for an arbitrary-but-finite number of steps of reduction.
  - Observe if ~e |-> e'~, then ~e |=> e'~
  - If ~e |=> e'~, then ~e ==> e'~
  - If ~e1 ==> e2~ and ~e2 ==> e3~, then ~e1 ==> e3~.
  - *Example:* evaluating ~(1 + 2)*(3 + 4)~
    - We have ~(1 + 2)*(3 + 4) |=> 3*7~ since ~(1 + 2) |=> 3~ and
      separately ~3 + 4 |=> 7~; and then we have ~3*7 |=> 21~.
      So ~|=>~ does one step of evaluation on disjoint subexpressions.
    - But we also have ~(1 + 2)*(3 + 4) ==> 21~ done in one step.
    - The longest route is to do one step of evaluation at a time, which
      could look something like: ~(1 + 2)*(3 + 4) |-> 3*(3 + 4) |-> 3*7 |-> 21~,
      but there are other possibilities.
  - Syntax on paper, we would write:
    - ~e ==> e'~ as $e \Longrightarrow e'$
    - ~e |-> e'~ as $e \mapsto e'$
    - ~e |=> e'~
    - $e\hookrightarrow v$ for $e\Longrightarrow v$ and $v$ is a value,
      i.e., $e$ is valuable and $e\Longrightarrow v$

* Provisional Definition of Extensional Equivalence
:PROPERTIES:
:CUSTOM_ID: h-57e4c16f-fd17-4b6f-ab48-8527cf6a3ece
:END:

There are several cases to the definition of extensional
equivalence. Really, there is an abstract definition, and these several
cases are theorems...but the abstract definition is too abstract.

** For "base" types
:PROPERTIES:
:CUSTOM_ID: h-b1cbf2e8-1917-4839-b783-103116c2fa2b
:END:

Let $e$, $e'$ be two expressions of the same base type (e.g., ~int~,
~char~, ~string~, ~bool~, ~word~, ~unit~, etc.). We say they are
{{{dfn(Extensionally Equivalent)}}}, written $e\cong e'$, if one of the
following is true:

1. Evaluation of ~e~ produces the same value as the evaluation of ~e'~,
2. Evaluation of ~e~ raises the same exception as the evaluation of
   ~e'~, or
3. Both loop forever.

#+begin_remark
We can see that two values of the same base type are extensionally
equivalent iff they are identical (modulo silly encoding issues, like
~0x10~ and ~16~ are the same value but expressed in superficially
different literals).
#+end_remark

Also notice, if we have the product of base types, extensional
equivalence carries over component-wise.

** For Function Values
:PROPERTIES:
:CUSTOM_ID: h-501c753f-588d-4a7a-9436-33afc343fb04
:END:

We say two function values ~f : T -> T'~ and ~g : T -> T'~ of the same
type are extensionally equivalent whenever ~f(v) == g(w)~ for all
extensionally equivalent argument values ~v : T~ and ~w : T~.

#+begin_remark
A "function value" is an anonymous lambda expression ~fn x => e~
together with a (possibly empty) environment of bindings for any
"nonlocal variables" appearing in the body of the function. This pairing
(of a lambda expression plus an environment) form a {{{dfn(Closure)}}}.
#+end_remark

** For Functions
:PROPERTIES:
:CUSTOM_ID: h-53a1480a-6ff2-4505-a7f8-4c752986c693
:END:

We will say two /expressions/ of type ~T -> T'~ are extensionally
equivalent if one of the following hold:

1. they both evaluate to extensionally equivalent function values,
2. they both raise extensionally equivalent exceptions when evaluates, or
3. both loop forever when evaluated.

** General Definition
:PROPERTIES:
:CUSTOM_ID: h-aab6de97-f44c-4910-ba94-b074fa9300ca
:END:

Two expressions ~e~ and ~e'~ are extensionally equivalent provided (a)
they are of the same type, and (b) one of the following holds:

1. they both evaluate to extensionally equivalent values, or
2. they both raise extensionally equivalent exceptions when evaluates, or
3. both loop forever when evaluated.

(Two exceptions are extensionally equivalent if they are the same kind of
exception and their payloads are extensionally equivalent.)

When ~e~ and ~e'~ are extensionally equivalent, we write ~e == e'~ in
code and $e\cong e'$ on paper.

** Using this Definition
:PROPERTIES:
:CUSTOM_ID: h-784e6087-72e0-42be-b709-ac98263747ab
:END:

For us to actually use this definition, we need to introduce the various
base types and germane information, like:

- Values of the type
- Primitive Operations provided by the Standard Basis
- Typing rules associated with the primitive operations
- Evaluation rules

Since most of the primitive operations are /functions/ and Standard ML
is call-by-value, the only evaluation rules we really need are for the
special functions like ~andalso~, ~orelse~, etc.

#+begin_remark
What exactly /are/ "values"? They correspond to non-expansive
expressions as found in \sect4.7 of [[https://smlfamily.github.io/sml97-defn.pdf][the 1997 Definition of Standard ML]].
These are literal values ("special constants"), tuples of non-expansive
expressions, function values, constructors applied to non-expansive
expressions, etc.
#+end_remark

* Initial Specification of a Few Types
:PROPERTIES:
:CUSTOM_ID: h-d74b14b3-96ba-441b-bfee-227798e0544a
:END:

We need to specify a few of the "base types" for Standard ML before we
can reason about things. This will include giving the operational
semantics for a few of the functions found in the Standard basis library
(i.e., "primitive functions").

We should also provide similar specifications for ~char~, ~string~, ~unit~.
The other interesting types are tuples, records, functions; we do not
specify these, but they should be understood.

** Integers
:PROPERTIES:
:CUSTOM_ID: h-d3e60ff9-e8a7-4e93-b6dd-aa735f544af6
:END:

- Type :: ~int~
- Values :: All the integers (this may or may not coincide with your
  implementation, we assume this is the case).
- Operations :: Let ~e1~, ~e2~ be integer expressions. Then we have the
  following additional operations: ~e1 + e2~, ~e1 - e2~, ~e1 * e2~, ~e1 div e2~,
  ~e1 mod e2~, among many others found in the Standard Basis library's
  [[https://smlfamily.github.io/Basis/integer.html][~INTEGER~]] signature.
- Typing Rules :: If ~<op>~ is a binary operator of integers, if ~e1 : int~
  and ~e2 : int~, then ~e1 <op> e2 : int~.
- Evaluation :: These operations are evaluated "from left to right" by
  first evaluating the arguments, then producing the final value.

For an explicit example of the evaluation rules, we have for addition
the following three rules:
\begin{equation}
\frac{e_{1}\stackrel{1}{\Longrightarrow}e_{1}'}{e_{1}~\mbox{\texttt{+}}~e_{2}
\stackrel{1}{\Longrightarrow}
e_{1}'~\mbox{\texttt{+}}~e_{2}}
\end{equation}
\begin{equation}
\frac{n_{1}~\mbox{value}\qquad e_{2}\stackrel{1}{\Longrightarrow}e_{2}'}{n_{1}~\mbox{\texttt{+}}~e_{2}
\stackrel{1}{\Longrightarrow}
n_{1}~\mbox{\texttt{+}}~e_{2}'}
\end{equation}
\begin{equation}
\frac{n_{1}~\mbox{value}\qquad n_{2}~\mbox{value}}{n_{1}~\mbox{\texttt{+}}~n_{2}
\stackrel{1}{\Longrightarrow}
n}
\end{equation}
where $n$ is the integer value representing the sum of the integer
values $n_{1}$ and
$n_{2}$.

The other evaluation rules are similarly defined.

** Booleans
:PROPERTIES:
:CUSTOM_ID: h-aa97e59e-f741-47fa-9977-dbcc09500b15
:END:

- Type :: ~bool~
- Values :: ~true~ and ~false~
- Operations :: Let ~e1~ and ~e2~ be Boolean expressions. Then ~e1 andalso e2~,
  ~e1 orelse e2~, ~not e1~ are Boolean expressions. If ~t1~, ~t2~ are
  any two expressions of type ~T~, then ~if e1 then t1 else t2~ is an
  expression of type ~T~.
- Typing Rules :: As we would expect.
- Evaluation :: The definition specifies ~e1 andalso e2~ is syntactic
  sugar for ~if e1 then e2 else false~, and ~e1 orelse e2~ is syntactic
  sugar for ~if e1 then true else e2~. By "syntactic sugar", we mean we
  can replace ~andalso~, ~orelse~ with these expressions.


* Basic Properties
:PROPERTIES:
:CUSTOM_ID: h-1bb08f53-6114-4227-8897-b85963f0d0b8
:END:

#+begin_theorem
For every syntactically valid Standard ML expression ~e~ (i.e., ~e~ is
well-typed and has type ~T~) that we can
evaluate, exactly one of the following holds:
- ~e ==> v~ for some value ~v : T~
- the evaluation of ~e~ raises some exception
- the evaluation of ~e~ loops forever.
#+end_theorem

#+begin_proof
The dynamic semantics for expressions in Standard ML is given by rules
(90) through (149) of the [[https://smlfamily.github.io/sml97-defn.pdf][1997 Definition]]. By inspection, we see that
these are the only possibilities. 
#+end_proof

#+begin_definition
Two expressions ~e~ and ~e'~ are said to be {{{define(Extensionally Equivalent)}}}
(written $e\cong e'$ or ~e == e'~) if there is a type ~T~ such that ~e : T~
and ~e' : T~, and one of the following holds:
- there are values ~v : T~ and ~v' : T~ such that ~e ==> v~ and ~e' ==> v'~
  and ~v == v'~, or
- the evaluation of ~e~ and ~e'~ both raise extensionally equivalent exceptions, or
- the evaluation of both ~e~ and ~e'~ loop forever.
#+end_definition

#+begin_proposition
If ~e1 ==> e2~, then ~e1 == e2~.
#+end_proposition

#+begin_corollary
If ~e1 =​=​> e~ and ~e2 =​​=​> e~, then ~e1 =​= e2~.
#+end_corollary

#+begin_theorem
Equivalence is an equivalence relation:
1. Reflexivity: ~e == e~
2. Symmetry: if ~e1 == e2~, then ~e2 == e1~
3. Transitivity: if ~e1 == e2~ and ~e2 == e3~, then ~e1 == e3~.
#+end_theorem

#+begin_proof
Proof of reflexivity: by theorem 5, there are three possibilities when
trying to evaluate ~e~:
1. Consider ~v : T~ such that ~e ==> v~.
   Then ~e ==> v~ and ~e ==> v~, and ~v == v~, which means ~e == e~ by
   definition of extensional equivalence.
2. The evaluation of ~e~ raises an exception, which is extensionally
   equivalent to itself. Hence ~e == e~ by the second clause of the
   definition of extensional equivalence.
3. The evaluation of ~e~ loops forever. Then ~e == e~ by the third
   clause of the definition of extensional equivalence.

Proof of symmetry is similar, working by cases given by the clauses of
the definition of extensional equivalence.

Transitivity is similarly done by cases, using symmetry of extensional
equivalence to prove the first case, and possibly some lemmas for the
remaining two cases.
#+end_proof

Furthermore, extensional equivalence is a congruence (in the sense of
universal algebra), meaning we can replace one
expression with an equivalent one "inside" any bigger expression. Let us
formalize this notion using the idea of "referential transparency".

#+begin_definition
1. We call a context $E[-]$ (i.e., an "expression with a hole")
   {{{define(Referentially Transparent)}}} if for any $e\hookrightarrow v$
   of appropriate type we have $E[e]\cong E[v]$.
2. We can call an expression $e$ {{{define(Referentially Transparent)}}}
   if for every well-typed sub-expression $e_{1}$ there is a
   corresponding context $E[-]$ such that (a) we have $E[e_{1}]=e$ identically,
   and (b) $E[-]$ is a referentially transparent context.
3. We want to work with referentially transparent expressions.
#+end_definition

The intuition is that referentially transparent expressions are "pure functions"
or build out of "pure functions". There are no side-effects when
evaluating a referentially transparent expression.

#+begin_theorem
Let $e$ be a referentially transparent expression.
Let $e_{1}$ be any subexpression of $e$ and $e = E[e_{1}]$.
Then for any well-typed expression $e_{2}\cong e_{1}$ we have $E[e_{1}]\cong E[e_{2}]$.
#+end_theorem

#+begin_math-example
For applications, we may generalize from the situation with a single argument:
- If ~e2 == e2'~, then ~e1 e2 == e1 e2'~
- If ~e1 == e1'~, then ~e1 e2 == e1' e2~
#+end_math-example

#+begin_math-example
On tuples, the general pattern may be gleaned from the ordered pair:
- If ~e1 == e1'~, then ~(e1, e2) == (e1', e2)~
- If ~e2 == e2'~, then ~(e1, e2) == (e1, e2')~
#+end_math-example

#+begin_math-example
If ~e1 == e1'~,
then ~(let val x = e1 in e2 end) == (let val x = e1' in e2 end)~.
#+end_math-example

#+begin_math-example
If ~e1 == e1'~, then

#+begin_example
case e of [] => e1 | x :: xs => e2

==

case e of [] => e1' | x :: xs => e2
#+end_example

#+end_math-example

For subexpressions which "go under binders", we quantify over all values
of the appropriate type. Consider the following examples:

#+begin_math-example
(Function bodies)
If for all values ~v : T~, ~e[v/x] == e'[v/x]~, then
~(fn x : T => e) == (fn x : T => e')~.
#+end_math-example

#+begin_math-example
(Let bodies)
If for all values ~v : T~, we have ~e2[v/x] == e2'[v/x]~, then
~(let val x : T = e1 in e2 end) == (let val x : T = e1 in e2' end)~.
#+end_math-example

#+begin_math-example
(Destructuring lists)
If for all values ~v~ and ~vs~ we have ~e2[v/x][vs/xs] == e2'[v/x][vs/xs]~,
then

#+begin_example
case e of [] => e1 | x::xs => e2

==

case e of [] => e1 | x::xs => e2'
#+end_example
#+end_math-example

* Reductions
:PROPERTIES:
:CUSTOM_ID: h-bc08c8a9-465d-41cb-b9fc-0ad222f6410d
:END:

Since Standard ML is call-by-value, we evaluate the arugment to a
function /before/ substituting into the body. We can express this by the
following:

#+begin_proposition
If ~e2 |-> e2'~,
then ~(fn x => e) e2 |-> (fn x => e) e2'~.
#+end_proposition

#+begin_remark
We write ~|->~ for one step of calculation, and we write ~==>~ to mean
there have been an arbitrary number of steps.
#+end_remark

#+begin_proposition
For short-circuiting boolean operators, ~andalso~ and ~orelse~, we have
different rules of evaluation:
- If ~e1 ==> true~, then ~e1 andalso e2 ==> e2~ and ~e1 orelse e2 ==> true~;
- If ~e1 ==> false~, then ~e1 andalso e2 ==> false~ and ~e1 orelse e2 ==> e2~.

(This is because ~andalso~ and ~orelse~ are not functions)
#+end_proposition

#+begin_proposition
If ~e' value~, then
~(fn x => e) e' = e[e'/x]~.
#+end_proposition

The critical aspect of this second rule is the premise ~e' value~. We
have several other reduction rules, which "should be obvious".

#+begin_math-example
~(case [] of [] => e1 | x::xs => e2) == e1~

and

If ~v::vs value~, then
~(case v::vs of [] => e1 | x::xs => e2) == e2[v/x][vs/xs]~
#+end_math-example

#+begin_math-example
If ~(v1,v2) value~, then
~(let val (x,y) = (v1,v2) in e end) == e[v1/x][v2/y]~.
#+end_math-example

#+begin_theorem
If ~e'~ is valuable, then ~((fn x => e) e') == (let x = e' in e end)~.
#+end_theorem

* Type-Directed Rules
:PROPERTIES:
:CUSTOM_ID: h-1b53c25f-fb11-47bc-8174-d73aa0dfb041
:END:

#+begin_proposition
Two functions are equivalent if they agree on all arguments; i.e.,
if for all values ~v : T1~ we have ~f v == g v : T2~,
then ~f == g : T1 -> T2~.

Further, for all values ~v~ and ~v'~,
if ~v == v' : T1~, then ~f v == g v' : T2~
#+end_proposition

#+begin_proposition
Constructors are injective and disjoint.
#+end_proposition

#+begin_math-example
Denote by ~!=~ the negation of our equivalence relation (so ~a != b~
means not ~a==b~), then we have
- ~x::xs != []~
- If ~y::ys == x::xs~, then ~x==y~ and ~xs==ys~.
#+end_math-example

* Valuability
:PROPERTIES:
:CUSTOM_ID: h-517e93d9-e267-41b9-86d7-ec893dfe7f73
:END:

#+begin_lemma
~[] valuable~
#+end_lemma
#+begin_lemma
If ~x~ and ~xs~ are valuable (with values ~v~ and ~vs~, respectively),
then ~x::xs valuable~.
#+end_lemma

#+begin_lemma
If ~x~ and ~y~ are valuable, then ~(x,y) valuable~.
#+end_lemma

#+begin_lemma
~(fn x => e) valuable~
#+end_lemma

#+begin_theorem
If ~f total~ and ~e valuable~,
then ~(f e) valuable~.
#+end_theorem

#+begin_remark
To prove ~f:T->T'~ is total, we want to show ~f v~ is valuable for all
values ~v:T~.
#+end_remark

#+begin_theorem
Let ~e~, ~e1~, ~e2~ be expressions.
If:
- ~e~ is valuable,
- ~e==[]~ implies ~e1 valuable~, and
- for all values ~v~ and ~vs~,
  ~e==v::vs~ implies ~e2[v/x][vs/xs]~ is valuable;

...then we have
#+begin_example
(case e of [] => e1 | x::xs => e2) valuable
#+end_example
#+end_theorem

#+begin_theorem
In general, valuability is closed under equivalence:
If ~e==e'~ and ~e'~ is valuable, then ~e~ is valuable.
#+end_theorem

#+begin_theorem
(Valuable-Stepping Principle)

If ~e2~ is a valuable expression, then
~(fn x => e1) e2 == e1[e2/x]~.
#+end_theorem
#+begin_remark
This can be made more complicated if ~e1~ or ~e2~ is impure.
#+end_remark

* Inversions
:PROPERTIES:
:CUSTOM_ID: h-29c752da-965c-44b2-97fa-0375f6722045
:END:

For closed terms, ~e == v~ implies ~e~ evaluates to a value ~e ==> v'~ where ~v' == v~. This
justifies the following inversion(s):

#+begin_theorem
If ~e1 e2 == v~,
then there exists an expression ~e~ and a value ~v~ such that

1. ~e1 == (fn x => e)~
2. ~e2 == v2~
3. ~e[v2/x] == v~
#+end_theorem

#+begin_theorem
If ~case e of [...]~ is valuable,
then ~e~ is valuable.
#+end_theorem

* Concluding Remarks
:PROPERTIES:
:CUSTOM_ID: h-1e7d947c-6fb0-456c-b6d0-110da995dcf1
:END:

For the axiomatic behaviour and contracts for the standard basis
library, I would defer to the Basis library of Hamlet:

- [[https://github.com/rossberg/hamlet/tree/master/basis][Basis]]

HaMLet emphasizes adherence to the Standard ML definition, so this may
be useful.

* References
:PROPERTIES:
:CUSTOM_ID: h-63a006e4-bb72-451a-b884-463a6e9e9d42
:END:

- Bob Harper, "Equational Reasoning Guide",
  [[http://www.cs.cmu.edu/~15150/][CMU CS15-150]].
  - [[https://www.cs.cmu.edu/~15150/previous-semesters/2012-spring/resources/handouts/equational.pdf][2012 Handout]]
  - [[https://www.cs.cmu.edu/~me/courses/15-150-Spring2020/lectures/09/structural-poly.pdf][Notes on structural induction]]
  - [[https://www.cs.cmu.edu/~me/courses/15-150-Spring2020/lectures/01/evaluation.pdf][Notes on Evaluation]]
  - [[https://www.cs.cmu.edu/~15150/resources/lectures/notes-lec0102.pdf][Notes]] using ~=>*~ instead of ~==>~
- David Walker, Princeton [[https://www.cs.princeton.edu/~dpw/courses/cos326-12/notes/reasoning.php][COS326]] notes, 2012
  