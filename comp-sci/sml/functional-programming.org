#+TITLE: Functional Programming in Standard ML
#+AUTHOR: Alex Nelson
#+EMAIL: pqnelson@gmail.com
#+DATE: <2023-02-27T07:51:35-08:00>
#+LANGUAGE: en
#+OPTIONS: H:5
#+HTML_DOCTYPE: html5
#+INCLUDE: ../../org-macros.org
#+HTML_LINK_UP: ./index.html
#+HTML_LINK_HOME: ../../index.html
#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="../../css/stylesheet.css" />
# Created Monday February 27, 2023 at  7:51AM

* Introduction
:PROPERTIES:
:CUSTOM_ID: h-f6bcf684-5591-4c4a-9c2b-1552ef0fd0c2
:END:

Standard ML is not a "pure" functional programming language, but we can
work with the fragment of Standard ML which /is/ a "pure" functional
language. The only side effects come from:

- References
- Exceptions
- Input/output
- Threading (forking, etc.)

I suppose a "purist" would argue that definitions also cause a
side-effect, altering the environment to add a new binding. We will
ignore such people.

The advantage to writing functional code is that we can take advantage
of [[file:equational-reasoning.org][equational reasoning]] to /prove/ the code works as expected.

* References
:PROPERTIES:
:CUSTOM_ID: h-ccb124e3-a218-4328-88df-258160dc5172
:END:

- Åke Wikström,\\
  {{{book-title(Functional Programming Using Standard ML)}}}.\\
  Prentice Hall, 1987.