#+TITLE: Normalization by Evaluation
#+AUTHOR: Alex Nelson
#+EMAIL: pqnelson@gmail.com
#+DATE: <2022-03-29T09:59:12-07:00>
#+LANGUAGE: en
#+OPTIONS: H:5
#+HTML_DOCTYPE: html5
#+INCLUDE: ../../org-macros.org
#+HTML_LINK_UP: ./index.html
#+HTML_LINK_HOME: ../../index.html
#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="../../css/stylesheet.css" />
# Created Tuesday March 29, 2022 at  9:59AM

* Overview
:PROPERTIES:
:CUSTOM_ID: h-ea13da4e-431d-4c86-ba53-eec2f29b8ed2
:END:

A common project for functional programming courses is to implement a
typed lambda calculus. There are a variety of ways to do this, but we
will focus on the technique of {{{dfn(Normalization by Evaluation)}}}.
(The alternative techniques seem to be variations of de Bruijn indices,
though I understand some languages have more sophisticated techniques
with nominal variables, or whatever.)


* References
:PROPERTIES:
:CUSTOM_ID: h-226a7a03-950e-4964-ba32-283c449ff4f8
:END:

- David Thrane Christiansen,
  "Checking Dependent Types with Normalization by Evaluation: A Tutorial (Haskell Version)".
  [[https://davidchristiansen.dk/tutorials/implementing-types-hs.pdf][PDF]], 2019.
- Danvy, Keller, and Puech,
  "Typeful Normalization by Evaluation".
  [[https://hal.inria.fr/hal-01397929/][Eprint]] for OCaml implementation.
- Lennart Augustsson,
  [[https://augustss.blogspot.com/2007/10/simpler-easier-in-recent-paper-simply.html][Simpler, Easier!]]
  Blog post dated 25 October 2007, giving an implementation of
  dependently typed lambda calculus in Haskell
- Andreas Abel,
  "Normalization by Evaluation: Dependent Types and Impredicativity".
  [[https://www.cse.chalmers.se/~abela/habil.pdf][PDF]], PhD thesis (2013), 96 pages