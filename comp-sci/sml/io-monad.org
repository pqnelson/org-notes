#+TITLE: IO Monad - SML
#+AUTHOR: Alex Nelson
#+EMAIL: pqnelson@gmail.com
#+DATE: <2022-07-08T09:22:00-07:00>
#+LANGUAGE: en
#+OPTIONS: H:5
#+HTML_DOCTYPE: html5
#+INCLUDE: ../../org-macros.org
#+HTML_LINK_UP: ./index.html
#+HTML_LINK_HOME: ../../index.html
#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="../../css/stylesheet.css" />
# Created Friday July  8, 2022 at  9:22AM

* Introduction
:PROPERTIES:
:CUSTOM_ID: h-7aca0398-7884-42b1-a3db-8b6a356abd42
:END:

We typically abstract away effects in a monad, and IO is one of the
most basic effects for programmers.

Recall the basic idea for using monads: if we have a function with a
side-effect (like printing a message to the screen), then let us
denote its type with a squiggle arrow =f : A ~> B=. Pure functions
without side-effects would be written as =pure_fn : A -> B= with the
usual arrow.

Suppose now that we wanted to curry a function with a side-effect
=f : A * B ~> C=, what would its type look like? We would guess it
either looks like =g : A -> (B ~> C)= or =h : A ~> (B ~> C)=.
We would also expect applying only one argument would not produce any
side-effect, only when both arguments are provided would a side-effect
be produced. This would be the first case, =g : A -> (B ~> C)= describes
=f : A * B ~> C= curried.

Now, we can recall =() * A= is isomorphic as a type to =A=. This means
that =f : A ~> B= is isomorphic to a function with type =f2 : A * () ~> B=.
Currying this function gives us =g2 : A -> (() ~> B)=. Now we
introduce a monad with type
~B impure = () ~> B~
which means we have our impure function isomorphic to
the pure function =g2 : A2 -> B impure=.

For IO operations, the monadic bind amounts to ordering the IO
operations and executing them in the order given. *For our purposes*
in this exploration, it suffices to explore teletype IO (i.e.,
printing a string to the terminal, reading text from the keyboard, and
nothing else).

#+begin_remark
In an eager language, the IO monad is a /weak/ monad. This is proven
in chapter 8 of Andrew Gordon's PhD dissertation. Think about the
situation when a bottom value has been encountered, but will not be
needed in the next IO operation. Lazy languages can carry on without a
problem. Eager languages cannot.

However, [[https://okmij.org/ftp/Haskell/index.html#lazyIO-not-True][lazy IO breaks equational reasoning]]...which is pretty much
why we would want monadic IO (for the equational reasoning!).
#+end_remark

#+begin_puzzle
The IO monad makes sense for a single-core processor, but how would we
extend this to work with multiple threads executed in parallel?
#+end_puzzle

Our implementation will also be incomplete compared to what, say,
Haskell offers. There are avenues for further investigation.

#+begin_puzzle
Would it be possible to extend the IO monad implemented in Standard ML
to include IORef operations? If so, could we do it without relying on
native ~ref~ types?
#+end_puzzle

* Andrew Gordon's IO Monad
:PROPERTIES:
:CUSTOM_ID: h-3a1304a4-9f78-4564-b60a-5f38eb8f88be
:END:

We can construct the IO Monad in Standard ML, which has been done in
Andrew Gordon's PhD thesis. There the construction uses an abstract type:

#+begin_src sml
infix 1 >> >>=
abstype 'a Job = JOB of unit -> 'a
with
    (* exec : 'a Job -> 'a *)
    fun exec (JOB f)  = f ()
    (* return : 'a -> 'a Job *)
    fun return x      = JOB (fn _ => x)
    (* (>>=) : 'a Job * ('a -> 'b Job) -> 'b Job *)
    fun (JOB f) >>= q = JOB (fn _ => exec (q (f ())))
    (* getStr : int -> TextIO.vector Job *)
    fun getStr n      = JOB (fn _ => TextIO.inputN(TextIO.stdIn, n))
    (* putStr : string -> unit Job *)
    fun putStr s      = JOB (fn _ => print s)
end

(* (>>) : 'a Job * 'b Job -> 'b Job *)
fun p >> q  =  p >>= (fn _ => q);

(* gettingLine : string -> string Job *)
fun gettingLine s =
    getStr 1 >>= (fn c => if c = "\n"
                          then return(s)
                          else gettingLine (s^c));

(* getLine : string Job *)
val getLine = gettingLine "";

val main : unit Job =
    putStr "First name: " >> getLine >>= (fn first =>
    putStr "Second name: " >> getLine >>= (fn second =>
    putStr ("Hello "^first^" "^second^"\n")));
(* exec main; *)
#+end_src

* Using Modules
:PROPERTIES:
:CUSTOM_ID: h-71c727eb-aa16-440b-85a9-e791f7171c2a
:END:

We can encode the IO Monad using SML's Module system. The signature for
a Monad would be:

#+begin_src sml
signature MONAD = sig
    type 'a m;
    val return : 'a -> 'a m;
    val bind : 'a m -> ('a -> 'b m) -> 'b m;
end;
#+end_src

The IO Monad requires a few more public-facing methods.

#+begin_src sml
signature IO_MONAD =
sig
    include MONAD;
    val exec : 'a m -> 'a;
    val getStr : int -> TextIO.vector m;
    val putStr : string -> unit m;
end;
#+end_src

Observe we just switched the ~Job~ constructor to ~m~. The
implementation details are straightforward.

* Concluding Remarks
:PROPERTIES:
:CUSTOM_ID: h-2b6d3956-2f50-46ce-a3b8-858cb3d84533
:END:

We can also implement an IO monad using [[file:free-monad.org][Free monads]], since free monads
provide a way to abstract away impure functions inside a pure
monad. This would not be performant in Haskell.

But there is also a way to implement an IO monad using
[[file:monad-transformer.org][monad transformers]]. This is what the [[https://hackage.haskell.org/package/pure-io-0.2.1/docs/PureIO.html][PureIO]] proof-of-concept library
does in Haskell.

#+begin_puzzle
We have so far not discussed blocking IO too much, but that's because
blocking IO comes about from threads and multiple
processes. Essentially /something else/ is reading or writing to a
file (or stream or socket or...) and we have to wait until the
resource is free. When will it become important to model this in an IO
monad?
#+end_puzzle

* References
:PROPERTIES:
:CUSTOM_ID: h-dc98edfb-d404-43d2-8c9b-c3f61d74fff8
:END:

- Andrew Gordon,\\
  "Functional Programming and Input/Output".\\
  Ph.D. Thesis, Cambridge, 1994; [[https://www.microsoft.com/en-us/research/publication/functional-programming-input-output/][Eprint]].
- Andrew Gordon,\\
  "PFL+: A Kernal Scheme for Functions I/O".\\
  UCAM tech report 160, dated February 1989 [[https://www.cl.cam.ac.uk/techreports/UCAM-CL-TR-160.pdf][PDF]]
- Simon Peyton Jones,\\
  "Tackling the awkward squad: monadic input/output, concurrency,
  exceptions, and foreign-language calls in Haskell".\\
  in /Engineering theories of software construction/, IOS Press, 2001;
  [[https://www.microsoft.com/en-us/research/publication/tackling-awkward-squad-monadic-inputoutput-concurrency-exceptions-foreign-language-calls-haskell/][Eprint]] and [[https://www.microsoft.com/en-us/research/wp-content/uploads/2016/07/mark.pdf][pdf]].
  - Discusses the IO monad using a "two tier" semantics, with process
    semantics for the IO part and some denotational semantics for a lazy
    lambda calculus.
- [[https://hackage.haskell.org/package/pure-io-0.2.1/docs/PureIO.html][PureIO]] --- a pedagogical IO monad implemented in Haskell
- [[https://github.com/noughtmare/free-io/blob/main/src/System/IO/Free.hs][free-io/Free.hs]] implementation using Free monads