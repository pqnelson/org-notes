#+TITLE: Monadology
#+AUTHOR: Alex Nelson
#+EMAIL: pqnelson@gmail.com
#+DATE: <2021-04-16T19:17:34-07:00>
#+LANGUAGE: en
#+OPTIONS: H:5
#+HTML_DOCTYPE: html5
#+INCLUDE: ../../org-macros.org
#+HTML_LINK_UP: ./index.html
#+HTML_LINK_HOME: ../../index.html
#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="../../css/stylesheet.css" />
# Created Friday April 16, 2021 at  7:17PM

* Overview
:PROPERTIES:
:CUSTOM_ID: h-fc1853e3-fe90-45e5-b000-ecc1cad4ed65
:END:

Monads provide a way to reason about side-effects in an equational way.
Basically a monad encodes a computation.

#+begin_src sml
signature MONAD =
sig
    type 'a m;
    val return : 'a -> 'a m;
    val >>= : 'a m * ('a -> 'b m) -> 'b m;
end;
#+end_src

* State Monad
:PROPERTIES:
:CUSTOM_ID: h-b106ae0d-9e48-4b83-946a-196e0a157a3c
:END:

The state monad encodes a computation =state -> (a, state)=.

#+begin_src sml
signature STATE =
sig
    type state;
    include MONAD where type 'a m = state -> 'a * state;

    (* core *)
    val runState : 'a m -> state -> 'a * state;
    val get : state m;
    val put : state -> unit m;

    val modify : (state -> state) -> unit m;
    val gets : (state -> 'a) -> 'a m;
    val evalState : 'a m -> state -> 'a;
    val execState : 'a m -> state -> state;
    val mapState : ('a * state -> 'b * state) -> 'a m -> 'b m;
    val withState : (state -> state) -> 'a m -> 'a m;
end;
#+end_src

* Input Output Monad
:PROPERTIES:
:CUSTOM_ID: h-ae2fffc8-6678-42d4-ac03-0bf3c39d9b28
:END:

When writing output, whether logging a program or displaying information
to the user, we can treat this as a monad of type =(output, a)= where
=a= is the value returned from the computation. So ~getChar~ would be of
type ~IO Char~, whereas ~putChar~ would be of type ~IO ()~ (since it
returns nothing, and "nothing" is encoded as the unit type).

The intuition (but seeming lie?) is that: Haskell uses
=RealWorld -> (RealWorld, a)= computation for its =IO= monad.
So ~type IO a = RealWorld -> (RealWorld, a)~?

** How Haskell Does it...
:PROPERTIES:
:CUSTOM_ID: h-08a4f52f-3779-44f3-981f-8d68675beb2c
:END:

Looking through the GHC source code, it seems that the IO Monad is
defined in [[https://github.com/ghc/ghc/blob/b73c9c5face16cc8bedf4168ce10770c7cc67f80/libraries/ghc-prim/GHC/Types.hs#L233][ghc-prim/GHC/Types.hs]] line 233:

#+begin_src haskell
{- |
A value of type @'IO' a@ is a computation which, when performed,
does some I\/O before returning a value of type @a@.
There is really only one way to \"perform\" an I\/O action: bind it to
@Main.main@ in your program.  When your program is run, the I\/O will
be performed.  It isn't possible to perform I\/O from an arbitrary
function, unless that function is itself in the 'IO' monad and called
at some point, directly or indirectly, from @Main.main@.
'IO' is a monad, so 'IO' actions can be combined using either the do-notation
or the 'Prelude.>>' and 'Prelude.>>=' operations from the 'Prelude.Monad'
class.
-}
newtype IO a = IO (State# RealWorld -> (# State# RealWorld, a #))
#+end_src

But it's used all over the place:

- [[https://github.com/ghc/ghc/blob/master/libraries/base/GHC/IO.hs][GHC.IO]] asserts ~IO~ is just an ~ST~ monad, "The IO Monad is just an
  instance of the ST monad, where the state thread is the real world."
- Its monadic structure is defined in [[https://github.com/ghc/ghc/blob/0619fb0fb14a98f04aac5f031f6566419fd27495/libraries/base/GHC/Base.hs#L1561-L1565][GHC.Base]], Lines 1561--1565 (it
  seems that ~bindIO~ does the heavy lifting).
  - Note: ~State#~ and ~RealWorld~ are defined in [[https://github.com/ghc/ghc/blob/a7f9670e899bcbc87276446a1aac2304cade2b2f/compiler/GHC/Builtin/primops.txt.pp#L2759-L2769][GHC.Builtin.primops]]
    lines 2759--2769. They are pseudo-operations.

Note that ~bindIO~ is defined as:

#+begin_src haskell
--  ghc/libraries/base/GHC/Base.hs
bindIO :: IO a -> (a -> IO b) -> IO b
bindIO (IO m) k = IO (\ s -> case m s of (# new_s, a #) -> unIO (k a) new_s)

unIO :: IO a -> (State# RealWorld -> (# State# RealWorld, a #))
unIO (IO a) = a
#+end_src
Peyton Jones and Wadler write in their paper, "Imperative Functional Programming", (page 4):

#+begin_quote
If ~m :: IO a~ and ~k :: a -> IO b~, then ~m `bindIO` k~ denotes the
action that, when performed, behaves as follows: first perform action
~m~, yielding a value ~x~ of type ~a~, then perform action ~k x~,
yielding a value ~y~ of type ~b~, then return value ~y~.
#+end_quote

This only makes sense if ~IO a~ is a wrapper around ~(State# RealWorld -> (# State# RealWorld, a #))~,
or (less exciting and probably more accurate): things have changed since
January 1993...

Printing a string in Haskell is done in [[https://github.com/ghc/ghc/blob/f90487cacb16e8398c4c4a84de5a1e33ac4e7867/libraries/base/System/IO.hs#L277][System.IO]], line 277, for
example:

#+begin_src haskell
putStr          :: String -> IO ()
putStr s        =  hPutStr stdout s
#+end_src

This delegates the heavy lifting to [[https://github.com/ghc/ghc/blob/0619fb0fb14a98f04aac5f031f6566419fd27495/libraries/base/GHC/IO/Handle/Text.hs#L613][GHC.IO.Handle.Text]] defining
~hPutStr~ (lines 613 /et seq./):

#+begin_src haskell
hPutStr :: Handle -> String -> IO ()
hPutStr handle str = hPutStr' handle str False

-- | The same as 'hPutStr', but adds a newline character.
hPutStrLn :: Handle -> String -> IO ()
hPutStrLn handle str = hPutStr' handle str True
  -- An optimisation: we treat hPutStrLn specially, to avoid the
  -- overhead of a single putChar '\n', which is quite high now that we
  -- have to encode eagerly.

{-# NOINLINE hPutStr' #-}
hPutStr' :: Handle -> String -> Bool -> IO ()
hPutStr' handle str add_nl =
  do
    (buffer_mode, nl) <-
         wantWritableHandle "hPutStr" handle $ \h_ -> do
                       bmode <- getSpareBuffer h_
                       return (bmode, haOutputNL h_)

    case buffer_mode of
       (NoBuffering, _) -> do
            hPutChars handle str        -- v. slow, but we don't care
            when add_nl $ hPutChar handle '\n'
       (LineBuffering, buf) ->
            writeBlocks handle True  add_nl nl buf str
       (BlockBuffering _, buf) ->
            writeBlocks handle False add_nl nl buf str
#+end_src

** Standard ML Hackery
:PROPERTIES:
:CUSTOM_ID: h-9898e93b-cd74-49f3-95cc-681d75bca8a0
:END:

If I try to do something similar with Standard ML, then I'd guess:

#+begin_src sml
datatype 'a IO = IO of (unit -> 'a);

fun putStr (s : string) : unit IO = IO (fn () => print s);
#+end_src

This typechecks fine, but it doesn't produce what we'd expect. For
example, in Hamlet:

#+begin_example
- putStr "foo";
val it = IO _fn : unit IO
- print "foo\n";
foo
val it = () : unit
#+end_example

* References
:PROPERTIES:
:CUSTOM_ID: h-e4b4aced-cb78-493a-8c35-a12e1492cf09
:END:

- [[https://www.cl.cam.ac.uk/teaching//1819/ConceptsPL/lectures.pdf][Slides on Programming Languages]], pp. 220 /et seq./, discuss Monads in
  Standard ML.
- Robert Harper, [[https://existentialtype.wordpress.com/2011/05/01/of-course-ml-has-monads/][Of Course ML Has Monads!]]
- [[https://github.com/msullivan/sml-util/blob/master/hacks/monad.sml][monad.sml]]
- Stefan Kahrs,\\
  "First-Class Polymorphism for ML".\\
  In: Sannella D. (eds) Programming Languages and Systems — ESOP '94. ESOP 1994. Lecture Notes in Computer Science, vol 788. Springer, Berlin, Heidelberg. https://doi.org/10.1007/3-540-57880-3_22
  [[https://kar.kent.ac.uk/21199/][Eprint]].
  - This is particularly interesting, an overlooked article which
    explicitly gives an example of a monad in Standard ML in section 2.
- Mads Sig Ager, Olivier Danvy, Jan Midtgaard,\\
  "A Functional Correspondence between Monadic Evaluators and Abstract Machinesfor Languages with Computational Effects".\\
  [[https://www.brics.dk/RS/03/35/BRICS-RS-03-35.pdf][BRICS]] preprint, 34 pages; implements monads in Standard ML.
- Yutaka Nagashima, Liam O'Connor,\\
  "Close Encounters of the Higher Kind Emulating Constructor Classes in Standard ML".\\
  {{{arXiv(1608.03350)}}}, 3 pages; implements ~Applicative~, ~Monad~,
  etc., in Standard ML. The code is [[https://www.isa-afp.org/browser_info/current/AFP/Proof_Strategy_Language/files/Constructor_Class.ML.html][available]], with some [[https://www.isa-afp.org/browser_info/current/AFP/Proof_Strategy_Language/files/Instantiation.ML.html][instances]].
  (It was discussed on a [[https://keens.github.io/blog/2016/10/10/smldemonado/][blog]], if you can read Japanese...also see [[https://github.com/br0ns/PreML][PreML]]
  for ~do~-notation in Standard ML.)

** Monads in Haskell
:PROPERTIES:
:CUSTOM_ID: h-cac676fe-d364-4f03-9c2a-4750ce01619d
:END:

- [[https://stackoverflow.com/q/39202738/1296973][Compilation of IORef and STRef]]
- [[https://stackoverflow.com/q/30448007/1296973][What does 'MutVar#' mean?]]
- Andrew Butterfield and Glenn Strong,\\
  "Proving Correctness of Programs with IO—A Paradigm Comparison".\\
  In Proceedings of IFL2001.
- Wouter Swierstra and Thorsten Altenkirch,\\
  "Beauty in the Beast: A Functional Semantics for the Awkward Squad".\\
  [[https://www.cs.nott.ac.uk/~psztxa/publ/beast.pdf][PDF]] (2007)
- Simon Peyton Jones,\\
 "Tackling the Awkward Squad: monadic input/output, concurrency,
  exceptions, and foreign-language calls in Haskell".\\
  [[https://www.microsoft.com/en-us/research/wp-content/uploads/2016/07/mark.pdf?from=https%3A%2F%2Fresearch.microsoft.com%2F%7Esimonpj%2Fpapers%2Fmarktoberdorf%2Fmark.pdf][EPrint]] (2010)
- Jeremy Gibbons and Ralf Hinze,\\
  "Just ~do~ It:Simple Monadic Equational Reasoning".\\
  [[http://www.cs.ox.ac.uk/jeremy.gibbons/publications/mr.pdf][Eprint]] (2011)
- John Launchbury and Simon Peyton Jones,\\
  "Lazy Functional State Threads".\\
  1994 (discusses ~IO~ as a ~ST~ instance)


** Monads in Functional Programming (in general)
:PROPERTIES:
:CUSTOM_ID: h-9ccaab01-de54-45dd-a3fc-f8c3deab52da
:END:
- Philip Wadler,\\
  "Monads for Functional Programming".\\
  [[https://homepages.inf.ed.ac.uk/wadler/papers/marktoberdorf/baastad.pdf][Eprint]] (1995)
- Philip Wadler,\\
  "How to declare an imperative".\\
  [[https://homepages.inf.ed.ac.uk/wadler/papers/monadsdeclare/monadsdeclare.ps][PS]] (1997). Gives an example of reasoning with ~IO~ monad.
- Philip Wadler and Simon Peyton Jones,\\
  "Imperative Functional Programming".\\
  [[https://homepages.inf.ed.ac.uk/wadler/papers/imperative/imperative.ps][PS]] [[https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.86.9725&rep=rep1&type=pdf][Eprint]] (1993)
- R. Affeldt, D. Nowak, T. Saikawa,\\
  "A Hierarchy of Monadic Effects for Program Verification using
  Equational Reasoning".\\
  [[https://staff.aist.go.jp/reynald.affeldt/documents/monae.pdf][Eprint]] discusses using Coq to verify Monadic effects.