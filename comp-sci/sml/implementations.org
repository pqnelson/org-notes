#+TITLE: Implementations - SML
#+AUTHOR: Alex Nelson
#+EMAIL: pqnelson@gmail.com
#+DATE: <2022-01-15T12:22:45-08:00>
#+LANGUAGE: en
#+OPTIONS: H:5
#+HTML_DOCTYPE: html5
#+INCLUDE: ../../org-macros.org
#+HTML_LINK_UP: ./index.html
#+HTML_LINK_HOME: ../../index.html
#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="../../css/stylesheet.css" />
# Created Saturday January 15, 2022 at 12:22PM

This is just a cursory "How to build [SML implementation] on Raspberry
Pi" post.

* Poly/ML
:PROPERTIES:
:CUSTOM_ID: h-542dda25-92a9-4242-981a-326396c9d891
:END:

This seems to work fine. If you have a 32-bit ARM computer, then it will
simply compile bytecode, which will run considerably slower. The basic
steps [[https://www.polyml.org/download.html][seems to be:]]

#+begin_example
~/src/$ git clone https://github.com/polyml/polyml.git
~/src/polyml/$ cd polyml
~/src/polyml/$ ./configure
~/src/polyml/$ make
~/src/polyml/$ make compiler
~/src/polyml/$ sudo make install
#+end_example

It may be worth considering upgrading to a Raspberry Pi 3B+ or 4, since
Apple has transitioned to 64-bit ARM (we will end up piggie-backing off
opensource projects transitioning to support 64-bit ARM).

Note: since commit ~15c840d4~, the ARM64 performance has improved
drastically.

- [[https://github.com/polyml/polyml][Github page]] for Poly/ML

* MLton
:PROPERTIES:
:CUSTOM_ID: h-a474e941-9a4f-45e9-bf6c-0434934dfe24
:END:

This needs an existing SML compiler for the bootstrap process.

I think ~make polyml-mlton~ may work as well. Although the ~make bootstrap-polyml~
command may be the intended command.

I have tried ~make MLTON_COMPILE_ARGS="-codegen c" all~. I think
~-codegen llvm~ may produce better results?

It seems a better approach may be to cross-compile MLton on another
computer. Basically, on my x64 machine with 12GB of RAM, I ran the
following:

#+begin_example
alex@x64:~/src/$ git clone https://github.com/mlton/mlton
alex@x64:~/src/$ cd mlton
alex@x64:~/src/mlton/$ make
...
alex@x64:~/src/mlton/$ make REMOTE_MACHINE=alex@raspberry.local remote-bootstrap
...
#+end_example

If you do this, you might want to have your pubkey on your Raspberry Pi,
otherwise you'll end up logging in several dozen times over the course
of an hour or so. But it works! (I learned about this ~REMOTE_MACHINE~
trick from [[https://github.com/MLton/mlton/issues/438][github issues]].)

Well, right now, it breaks on the ~$(MAKE) remote--make-all~ step for me
(c.f., [[https://github.com/MLton/mlton/issues/438#issuecomment-849623610][steps]] in the remote build process).

In fact, you might want to run =scp ~/.ssh/id_rsa.pub alex@raspberrypi.local:.ssh/authorized_keys=
to avoid signing in repeatedly. And if you don't have an RSA key, you
might want to follow [[http://web.archive.org/web/20160404025901/http://jaybyjayfresh.com/2009/02/04/logging-in-without-a-password-certificates-ssh/][these instructions]].

- [[http://mlton.org/Home][Home page]]
- [[https://github.com/MLton/mlton][Github page]]
- [[http://mlton.org/RunningOnARM][Running on ARM]] MLton wiki
- [[http://www.mlton.org/pipermail/mlton-devel/2007-June/029877.html][Re: Cross compile on ARM successful]] MLton mailing list thread

** On Raspberry Pi
:PROPERTIES:
:CUSTOM_ID: h-c96a1a4f-8997-4297-b4a6-4d2446fac78d
:END:

This is actually harder than I realized to get this working on a
Raspberry pi 4. What I ended up doing is modifying my
~/etc/apt/sources.list~ to include a Debian repo, then I was able to
~sudo apt install mlton~. (There is some trickiness here, with
[[https://ccm.net/faq/809-debian-apt-get-no-pubkey-gpg-error][pubkey errors]].) I then used this to compile MLton from scratch.

Another caveat is that this will run into problems if your
~/boot/config.txt~ includes the line specifying it to run in 64-bit
mode. In fact, this borked my installation, and I had to reinstall
Raspbian lite.

*** Remote Compiling
:PROPERTIES:
:CUSTOM_ID: h-d3cc257f-9ad7-4953-9db1-abbed247e1f7
:END:

The exact failure is during the ~remote--make-all~ step:

#+begin_example
Compiling mlton
"/tmp/mlton-20210117.153942-gb1f1f0f09/boot/bin/mlton" \
	@MLton ram-slop 0.7  gc-summary -- \
	 -verbose 2 	\
	-target self -output mlton-compile			\
	mlton-stubs.mlb
MLton 20210117.153942-gb1f1f0f09 starting
   Compile SML starting
      frontend starting
         parseAndElaborate starting
make[2]: Leaving directory '/tmp/mlton-20210117.153942-gb1f1f0f09/mlton'
Segmentation fault
make[2]: *** [Makefile:72: mlton-compile] Error 139
make[1]: Leaving directory '/tmp/mlton-20210117.153942-gb1f1f0f09'
make[1]: *** [Makefile:75: compiler] Error 2
make: *** [Makefile:19: all] Error 2
make: *** [Makefile:666: remote--make-all] Error 2
#+end_example

* SML/NJ
:PROPERTIES:
:CUSTOM_ID: h-bb7d9bf3-a0a6-49d5-9e9c-dd3d65df7515
:END:

Doesn't support 32-bit ARM, and intends to support 64-bit ARM in the
next release (2022.1), so it's impossible at the moment (as of January 15,
2022).

This is yet another incentive to upgrade to a 64-bit Raspberry Pi...

- [[https://www.smlnj.org/][SML/NJ Homepage]]

* MLKit
:PROPERTIES:
:CUSTOM_ID: h-8bee04cc-0008-4a29-af61-8d0d0203aeb3
:END:

Only supports x86 and Javascript, so I couldn't get it working on my
Raspberry Pi. Formerly, MLKit had a bytecode interpreter, but this was
removed to support Javascript.

- [[https://github.com/melsman/mlkit][Github page]]