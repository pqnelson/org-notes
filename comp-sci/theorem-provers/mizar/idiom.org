#+TITLE: Idiomatic Mizar
#+AUTHOR: Alex Nelson
#+EMAIL: pqnelson@gmail.com
#+DATE: <2022-02-17T08:50:07-08:00>
#+LANGUAGE: en
#+OPTIONS: H:5
#+HTML_DOCTYPE: html5
#+INCLUDE: ../../../org-macros.org
#+HTML_LINK_UP: ./index.html
#+HTML_LINK_HOME: ../../../index.html
#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="../../../css/stylesheet.css" />
# Created Thursday February 17, 2022 at  8:50AM

* Defining new gadgets
:PROPERTIES:
:CUSTOM_ID: h-6c92317d-08d7-4be7-874c-cbeadad70682
:END:

The idiomatic way to define a new gadget, well, suppose we had our
definition found in a textbook schematically as:

#+begin_definition
A {{{dfn(Gadget)}}} consists of /stuff/ equipped with /structure/ such
that /properties/ hold.
#+end_definition

We would define a gadget in three steps:

1. Define a ~structure GadgetStr~ consisting of the stuff and structure
2. Define a ~attr Gadget-like~ which encodes the properties
3. Define a ~mode Gadget is Gadget-like GadgetStr~

** Naming Conventions
:PROPERTIES:
:CUSTOM_ID: h-673f1231-2018-4e88-9e86-2fe7d5af2242
:END:

- Structures seem to be named using ~PascalCase~
- Modes appear to also use ~PascalCase~ in general
- Attributes of the form ~Gadget-like~ use ~PascalCase~ suffixed by ~-like~.

* Defining new attributes
:PROPERTIES:
:CUSTOM_ID: h-f7f182d8-cefb-4cf2-a1ff-222bb752bf29
:END:

When defining a new attribute (say, ~hairy~) for a ~Gadget~, we
schematically define it as:

#+begin_src mizar
definition
  :: Any preliminary loci declarations here...
  let IT be Gadget;
  attr IT is hairy means
  :Def:
  :: ...
end;
#+end_src

This is a nod towards using ~it~ in defining functors and modes.

** Naming attributes
:PROPERTIES:
:CUSTOM_ID: h-f46be9be-286d-45cd-83ea-970f40340710
:END:

Use ~snake_case~ by default. The only exception that comes to mind is if
there's an already existing attribute which does not use ~snake_case~
and we are defining a generalization of it.

** Attributes vs Predicates
:PROPERTIES:
:CUSTOM_ID: h-90b13f3b-6948-4dce-a014-9f61cde07967
:END:

There are times when we want a predicate instead of an attribute. For
example, it is better to have a predicate ~G is_product_of Fam~ instead of 
an attribute ~G is product Fam~ or some other hackneyed solution.

Ask yourself: am I trying to write a proposition? Or am I trying to
describe a sub-class of terms? If you are trying to describe a subclass
of terms, you probably want either a mode or an attribute.

* Defining Functors
:PROPERTIES:
:CUSTOM_ID: h-5881c56c-2ce4-4ba5-af3c-d238e8e85981
:END:

*Principle 1: consistency.*
Honestly, the best policy is to be consistent with what you're working
with.

For example, I want to define the semi-direct product of two
groups. I look at the definition of the product of two groups in
[[http://mizar.org/version/current/html/group_7.html#T21][~GROUP_7~]], and define it similarly ~semidirect_product (G1, G2, phi)~
(or something similar).

When defining the Hall $\pi$ subgroups, I look at how the Sylow $p$
Subgroups were defined in [[http://mizar.org/version/current/html/group_10.html#K15][~GROUP_10~]] and adopt analogous naming
conventions like ~the_hall_pi-subgroups_of_primes (Pi, G)~.

*Principle 2: readability.* If there is nothing analogous existing in
the Mizar Math library, then try to be faithful to the notation in the
literature /provided it is well understood./ For example, the classical
matrix groups $GL(n,\mathbb{F})$ or $SL(n,\mathbb{F})$ and so on. We
could encode these as ~GL(n, F)~, ~SL(n, F)~, etc.

Care must be taken with this principle: finite group theory has a lot of
whacky notation which mystifies the entire subject. It would be better
to define the ~signalizer(A)~ instead of ~|/|(A)~ or some other
approximation of Ð˜(A).

* Proving Equality
:PROPERTIES:
:CUSTOM_ID: h-c237f8b0-d62a-4f23-972c-26128f814532
:END:

Use [[http://mizar.org/version/current/html/xboole_0.html][~xboole_0~]] definition 10 to prove ~X = Y~ by proving ~X c= Y~ and
~Y c= X~. This is the idiomatic way to prove the claim. Avoid [[http://mizar.org/version/current/html/tarski.html][~TARSKI:2~]]
if possible.

* Prefer Defining Attributes Over Modes
:PROPERTIES:
:CUSTOM_ID: h-ce0ec1af-f8be-4141-b904-a61b91e3fa6c
:END:

There are times when it is unclear whether we should define a new mode
or a new attribute, and the rule of thumb is to prefer defining
attributes and registering them (as opposed to using redefinitions).

There's an entire article justifying this practice:

- Artur Kornilowicz,\\
  "Registrations vs Redefinitions in Mizar".\\
  [[http://ceur-ws.org/Vol-1785/F5.pdf][Eprint]]

The rule presented in the paper:

#+begin_quote
If the result type of a functor and the mother type of a mode to which
the original type of the functor and the mode is redefined is an
expandable type, then such redefinitions are replaceable by a functorial
registration in the case of functors and by a conditional registration
in the case of modes.
#+end_quote

To be explicit, there are two cases:

1. When a ~redefine func~ can be replaced by a registration:
   if we redefine a functor to have the type an expandable mode,
   then we can replace the redefinition with a functor registration
   (provided the original definition of the functor has the same "mother
   type" [base type] as the desired type of the redefinition)
   - In this case, a functorial registration suffices.
2. When a ~redefine mode~ can be replaced by a registration:
   when the original definition of the mode has the same "mother mode"
   [base type] as the new redefinition's type
   - In this case, a conditional registration suffices.

* When in doubt, make it public
:PROPERTIES:
:CUSTOM_ID: h-ada80631-141b-4d42-877d-1773d385645e
:END:

Programmers have the idiom to make code private by default, and for good
reason.

But in Mizar, it's better to make everything public by default.

- Examples should be public theorems, not private lemmas.

The only exceptions I have found:

- If I have a confusingly long proof of a theorem ~A implies B & C~,
  I may have a private lemma proving half (~A implies C~, for example).
  This is just to clarify the proof for myself.