#+TITLE: On Kernel Size
#+AUTHOR: Alex Nelson
#+EMAIL: pqnelson@gmail.com
#+DATE: <2021-09-18T20:13:55-07:00>
#+LANGUAGE: en
#+OPTIONS: H:5
#+HTML_DOCTYPE: html5
#+INCLUDE: ../../org-macros.org
#+HTML_LINK_UP: ./index.html
#+HTML_LINK_HOME: ../../index.html
#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="../../css/stylesheet.css" />
# Created Saturday September 18, 2021 at  8:13PM

*Puzzle:* How small should a proof assistant's kernel be, for it to be
 considered "bug free"?

*Solution:* Use the [[https://en.wikipedia.org/wiki/Negative_binomial_distribution][Negative Bernoulli distribution]] for $r$ bugs, the
probability of a line of code being bug free is $p$, and the probability
of a bug is $q:=1-p\approx 20/1000$ (which is the currently accepted rate,
informally used among programmers), and [[https://en.wikipedia.org/wiki/Chebyshev%27s_inequality][Chebyshev's inequality]] to
estimate the number of bugs $r$ within $3\sigma$ of zero. Recall
$\mu=pr/q$ is the mean for the distribution, and $\sigma^{2}=pr/q^{2}$
is the variance. Then Chebyshev gives us, for tolerance of $k\sigma$:

\begin{equation}
\mu \leq k\sigma\implies \frac{p}{q}r \leq \frac{k}{q}\sqrt{pr}.
\end{equation}

We solve for $r$:

\begin{equation}
r \leq \frac{k^{2}}{p}.
\end{equation}

The upper bound on $r$ is then $r_{\text{max}}$ which is defined as:

\begin{equation}
r_{\text{max}} := \frac{k^{2}}{p}.
\end{equation}

Then we find the expected number of lines of code corresponding to $r_{\text{max}}$ should be

\begin{equation}
\mu_{\text{max}} = \frac{pr_{\text{max}}}{q} \approx \frac{k^{2}}{q}.
\end{equation}

For the figures given, we have

\begin{equation}
\mu_{\text{max}}(k) \approx 50 k^{2},
\end{equation}

and for $k=3$ sigmas we have:

\begin{equation}
\mu_{\text{max}} = 441.
\end{equation}

Thus the upper-bound on a program to be a candidate for being "bug free"
is approximately 441 lines of code.

#+begin_remark
If we then use this estimate for the number of lines $n\leq 50k^{2}$
for a /Binomial/ distributed random variable (*NOT* a /negative/
Binomial distributed random variable), then the probability of finding a
bug within 3 sigmas of 0 bugs is greater than 50%.
#+end_remark

#+begin_remark
Just a quick consistency check, we can use the [[https://en.wikipedia.org/wiki/Binomial_distribution#Poisson_approximation][Poisson approximation]] to
a Binomial distribution to find a heuristic upper bound on the number of
lines of code to be $n\leq 10/p\approx500$.
#+end_remark

* Observations
:PROPERTIES:
:CUSTOM_ID: h-bb3c318e-1f27-4cde-a517-2b476e0b15b8
:END:

If we use a [[https://en.wikipedia.org/wiki/Binomial_distribution][Binomial distributed]] random variable
$B\sim\mathrm{Bin}(N,p_{bug})$, and look at finding the greatest number
of lines of code $N$ such that the probability of finding no more than
$3\sigma$ bugs is $\Pr(B\leq 3\sigma)\geq 0.5$, then we find $N\approx 533$.
The R code which let me solve this by brute force:

#+begin_example
p_bug <- 0.02
q_bug <- 1 - p_bug

sd_bug <- sqrt(p_bug*q_bug) # sigma = sd_bug*sqrt(n)

# `guess` computes the likelihood L(n) = Pr(B <= 3*sigma | n)
# of no more than `3*sigma` bugs. We are trying to find the greatest
# `n` such that `guess(n) >= 0.5`; empirically this seems to be
# 533, and fluctuates around a decreasing trend.
guess <- function(n) { pbinom(round(3*sd_bug*sqrt(n)), n, p_bug)}

guess(441)
# [1] 0.6113548
guess(533)
# [1] 0.5002271
#+end_example

This ~guess~ is not a monotonic function, but 533 seems to be the
greatest value of ~n~ such that ~guess(n) >= 0.5~.

If we wanted to be more certain, we could modify the code:

#+begin_example
guess <- function(n, k=3) { pbinom(round(k*sd_bug*sqrt(n)), n, p_bug)}

expected_bugs <- function(n) { p_bug*n }

bug_sigma <- function(n, k) { k*sd_bug*sqrt(n) }

guess(1283, k=5) # expected bugs: 25.66
# [1] 0.5000607
bug_sigma(1283, 5)
# [1] 25.07329

guess(883, k=4) # expected bugs: 17.66
# [1] 0.5001064
bug_sigma(883, 4)
# [1] 16.64058

guess(533, k=3) # expected bugs: 10.66
# [1] 0.5002271
bug_sigma(533, 3)
# [1] 9.696453

## The case when bug_sigma(n, 3) == expected_bugs(n, 3)
guess(441, k=3) # expected bugs: 8.82
# [1] 0.6113548
bug_sigma(441, 3)
# [1] 8.82

guess(283, k=2) # expected bugs: 5.66
# [1] 0.5005881
bug_sigma(283, 2)
# [1] 4.710329

guess(133, k=1) # expected bugs: 2.66
# [1] 0.5018235
bug_sigma(133, 1)
# [1] 1.614559
#+end_example

The moral: the fewer lines of code, the better.

* References
:PROPERTIES:
:CUSTOM_ID: h-cec1260a-9145-4c6f-8a09-c3ad0fd3fbcb
:END:

The concern for small trusted kernel is generically referred to as the
"de Bruijn criterion", a term coined by Henk Berendregt in:

- Henk Barendregt,\\
  "The impact of the lambda calculus in logic and computer science".\\
  /Bulletin of Symbolic Logic/ *3*, no. 2 (1997) pp.181--215.

Specifically, Berendregt writes:

#+begin_quote
If a complicated computer system claims that a certain mathematical
statement is correct, then one may wonder whether this is indeed the case.
For example, there may be software errors in the system. A satisfactory
methodological answer has been given by de Bruijn. Proof-objects should
be public and written in such a formalism that a reasonably simple proof-checker
can verify them. One should be able to verify the program for
this proof-checker ‘by hand’. We call this the /de Bruijn criterion/.
#+end_quote