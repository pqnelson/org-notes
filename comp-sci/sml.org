#+TITLE: Standard ML
#+AUTHOR: Alex Nelson
#+EMAIL: pqnelson@gmail.com
#+DATE: <2021-03-25T15:31:25-07:00>
#+LANGUAGE: en
#+OPTIONS: H:5
#+HTML_DOCTYPE: html5
#+INCLUDE: ../org-macros.org
#+HTML_LINK_UP: ./index.html
#+HTML_LINK_HOME: ../index.html
#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="../css/stylesheet.css" />
# Created Thursday March 25, 2021 at  3:31PM

* Overview

The primordial "statically typed functional programming language",
Standard ML was invented to program theorem provers. The language
consists of two parts:

1. The Core Language = the typed-lambda calculus equipped with algebraic
   data types
2. The module language = the signatures, structures, functors

This is incredibly minimalistic compared to, say, Haskell.

#+begin_remark
The "pure" fragment of the core language is called {{{define(PCF)}}}
(Programming Computable Functions) for historic reasons, which is itself
an interesting little language.
#+end_remark

* References

** PCF

- Gordon Plotkin,
  "LCF considered as a programming language".
  /Theoretical Computer Science/ *5*, 3 (1977) 223–255.
- Robin Milner,
  "Fully abstract models of typed λ-calculi".
  /Theoretical Computer Science/ *4* (1977) 1–22.

** Category Theory

One major unresolved issue, for me, is whether we can articulate
Standard ML in terms of category theory. It's equally unclear to me if
Haskell can be articulated in terms of /genuine/ category theory (*Hask*
is not a category).

- G. Bellè, C. B. Jay, E. Moggi,
  "Functorial ML".
  /PLILP 1996: Programming Languages: Implementations, Logics, and Programs/
  pp 32-46
  [[https://doi.org/10.1007/3-540-61756-6_75][eprint]]
- Edward Kmett, "On *Hask*". [[https://youtu.be/Klwkt9oJwg0][Youtube]], 18 July 2014 (1 hr 2 min)
- Moggi, "An Abstract View of Programming Languages" [[https://www.ics.uci.edu/~jajones/INF102-S18/readings/09_Moggi.pdf][PDF]]
