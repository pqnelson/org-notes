#+TITLE: Standard ML
#+AUTHOR: Alex Nelson
#+EMAIL: pqnelson@gmail.com
#+DATE: <2021-03-25T15:31:25-07:00>
#+LANGUAGE: en
#+OPTIONS: H:5
#+HTML_DOCTYPE: html5
#+INCLUDE: ../org-macros.org
#+HTML_LINK_UP: ./index.html
#+HTML_LINK_HOME: ../index.html
#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="../css/stylesheet.css" />
# Created Thursday March 25, 2021 at  3:31PM

* Overview
:PROPERTIES:
:CUSTOM_ID: h-507f2c0c-f5e9-4589-926e-9ef4b6b62622
:END:

The primordial "statically typed functional programming language",
Standard ML was invented to program theorem provers. The language
consists of two parts:

1. The Core Language = the typed-lambda calculus equipped with algebraic
   data types
2. The module language = the signatures, structures, functors

This is incredibly minimalistic compared to, say, Haskell.

#+NAME: rmk-pcf
#+ATTR_HTML: :id rmk-pcf
#+begin_remark
The "pure" fragment of the core language is called {{{define(PCF)}}}
(Programming Computable Functions) for historic reasons, which is itself
an interesting little language.
#+end_remark

* References
:PROPERTIES:
:CUSTOM_ID: h-8bb21485-1413-4bef-9b13-d8255e14c965
:END:

** PCF
:PROPERTIES:
:CUSTOM_ID: h-3ce99ec5-e0a2-4442-b2d8-a278203dafaa
:END:


There are concerns about whether the operational semantics of PCF
coincides with its denotational semantics; if so, then it's a property
called [[https://plato.stanford.edu/entries/games-abstraction/]["full abstraction"]] (Stanford encyclopedia of philosophy entry).

Hyland and Ong note:

#+NAME: quote-pcf
#+ATTR_HTML: :id quote-pcf
#+begin_quote
Plotkin showed in [61] that the standard model is adequate but not
fully abstract for PCF. He also pointed out the reason for the failure of
full abstraction. The mismatch may be explained, in a nutshell, by the
fact that while PCF-programs correspond to sequential algorithms, the
standard Scott-continuous function space model contains parallel
functions or, more precisely, functions which can only be implemented by
parallel algorithms (e.g., parallel or). This point was made explicit by
Plotkin in [61] (see also [65] and [67] where the relation
between extensions of PCF by various parallel constructs is studied) as
follows.

...

- *61.* Plotkin,  G. D. (1977),\\
  "LCF as  a programming language",\\
  /Theoret.Comput.Sci./ *5*,  223--255.
- *65.* Sazonov, V. Yu. (1975),\\
  "Sequentiality and parallely computable functionals",\\
  in ``Proc.Symp.Lambda Calculus and Computer Science Theory,''
  Lecture Notes in Computer Science, Vol.37, Springer-Verlag,  Berlin/New York.
- *67.* Sazonov, V. Yu. (1976),\\
  "Expressibility of functions in Scott's LCF language",\\
  Algebra i Logika *15*, 308--330.
#+end_quote

- Gordon Plotkin,
  "LCF considered as a programming language".
  /Theoretical Computer Science/ *5*, 3 (1977) 223–255.
  [[https://homepages.inf.ed.ac.uk/gdp/publications/LCF.pdf][PDF]]
- Robin Milner,
  "Fully abstract models of typed λ-calculi".
  /Theoretical Computer Science/ *4* (1977) 1–22.
- Samson Abramsky, Radha Jagadeesan, Pasquale Malacaria,
  "Full Abstraction for PCF".
  [[https://arxiv.org/abs/1311.6125][arXiv:1311.6125]], 50 pages.
- JME Hyland, CHL Ong,
  "On Full Abstraction for PCF: I, II, and III".
  Eprint: [[https://ora.ox.ac.uk/objects/uuid:63c54392-39f3-46f1-8a68-e6ff0ec90218/download_file?file_format=pdf&safe_filename=1-s2.0-S0890540100929171-main.pdf&type_of_work=Journal+article][pdf]], 124 pages.
- Vladimir Sazonov,
  "Inductive Definition and Domain Theoretic Properties of Fully Abstract Models for PCF and PCF+".
  [[https://arxiv.org/abs/0707.3170][arXiv:0707.3170]], 50 pages.

** Category Theory
:PROPERTIES:
:CUSTOM_ID: h-412ef711-6f44-4b0b-bdea-31d24d849d87
:END:

One major unresolved issue, for me, is whether we can articulate
Standard ML in terms of category theory. It's equally unclear to me if
Haskell can be articulated in terms of /genuine/ category theory (*Hask*
is not a category).

- G. Bellè, C. B. Jay, E. Moggi,
  "Functorial ML".
  /PLILP 1996: Programming Languages: Implementations, Logics, and Programs/
  pp 32-46
  [[https://doi.org/10.1007/3-540-61756-6_75][eprint]]
- Edward Kmett, "On *Hask*". [[https://youtu.be/Klwkt9oJwg0][Youtube]], 18 July 2014 (1 hr 2 min)
- Moggi, "An Abstract View of Programming Languages" [[https://www.ics.uci.edu/~jajones/INF102-S18/readings/09_Moggi.pdf][PDF]]
