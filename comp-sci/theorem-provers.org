#+TITLE: On Theorem Provers
#+AUTHOR: Alex Nelson
#+EMAIL: pqnelson@gmail.com
#+DATE: <2020-12-26T10:47:33-08:00>
#+LANGUAGE: en
#+OPTIONS: H:5
#+HTML_DOCTYPE: html5
#+INCLUDE: ../org-macros.org
#+HTML_LINK_UP: ./index.html
#+HTML_LINK_HOME: ../index.html
#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="../css/stylesheet.css" />
# Created Saturday December 26, 2020 at 10:47AM

* Introduction
:PROPERTIES:
:CUSTOM_ID: h-6cd236b0-da47-4d1e-b956-7bac67f3d86f
:END:

There is much to say, too much. In the golden age of GOFAI, theorem
provers were considered an integral component to an agent's reasoning
capabilities. Needless to say, it didn't pan out, for AI. But in
mathematics, there is much use for theorem provers as a way to formalize
mathematics.


** Components of a Theorem Prover
:PROPERTIES:
:CUSTOM_ID: h-043b1579-6f46-4130-a530-a3778c6037db
:END:

Basically a theorem prover is an interpreter for a foundations of
mathematics. Andrej Bauer [[https://mathoverflow.net/a/376973/22457][argues]] the basic structure could be described
as several languages working together in concert:

- Kernel :: Validates every inference step and makes sure that proofs
  are correct, by implementing a formal system /F/ sufficiently
  expressive allowing the formalization of a large body of math,
  sufficiently simple for an efficient implementation.
- Vernacular :: The input language the user writes a proof in, which is
  typically complex and accomodates notational conventions.
- Elaborator :: Translates the vernacular into the kernel's formal system.
- Meta-Language :: Quite literally the programming language used to
  implement the kernel and elaborator.

** Vernacular
:PROPERTIES:
:CUSTOM_ID: h-0d8b24ba-8575-45c7-bd31-3d003d8bc87e
:END:

The design of the vernacular is quite difficult and under-studied. One
possible dichotomy is between a {{{define(Declarative)}}} style and a
{{{define(Procedural)}}} style. The former resembles how mathematicians
actually reason, the latter resembles how the kernel actually works.

We can combine these two together, as evidenced by Wiedijk's work ([[https://arxiv.org/abs/1201.3601][arXiv:1201.3601]]).

* Rapid Prototyping
:PROPERTIES:
:CUSTOM_ID: h-f631746a-da52-4b86-958f-8eb98d9593b4
:END:

We can implement theorem provers quickly in functional languages.
Indeed, ML was invented specifically to implement the LCF theorem
prover. The use of algebraic data types was to implement the AST of
formulas and logical languages, etc.

We can use Lisp (e.g., [[https://github.com/latte-central/LaTTe][LaTTe]]).

* References
:PROPERTIES:
:CUSTOM_ID: h-936b2cbd-53e0-49b7-b496-052d2ba3b091
:END:

- John Harrison, Josef Urban and Freek Wiedijk,
  "History of Interactive Theorem Proving".
  [[https://www.cl.cam.ac.uk/~jrh13/papers/joerg.pdf][PDF]], 85 pages.

** Vernacular
:PROPERTIES:
:CUSTOM_ID: h-31684bce-5827-4fe5-b9cd-00405898307d
:END:

- John Harrison,
  "A Mizar Mode for HOL".
  [[https://www.cl.cam.ac.uk/~jrh13/papers/mizar.html][Eprint]], 19 pages.
- John Harrison,
  "Proof Style".
  [[https://www.cl.cam.ac.uk/~jrh13/papers/style.html][Eprint]], 19 pages.
- Freek Wiedijk,
  "A Synthesis of the Procedural and Declarative Styles of Interactive Theorem Proving".
  Eprint: [[https://arxiv.org/abs/1201.3601][arXiv:1201.3601]], 26 pages.

** Mathematical Analysis in Theorem Provers
:PROPERTIES:
:CUSTOM_ID: h-f7b249a0-b1ec-4a8b-a5ca-303733594963
:END:

- Sylvie Boldo, Catherine Lelay, Guillaume Melquiond,
  "Formalization of Real Analysis: A Survey of Proof Assistants and Libraries".
  [[https://hal.inria.fr/hal-00806920v2/document][PDF]], 40 pages.
- Micaela Mayero,
  "Using theorem proving for numerical analysis: Correctness proof of an
  automatic differentiation algorithm".
  In {{{book-title(TPHOLs 2002: Theorem Proving in Higher Order Logics)}}},
  pp 246--262.