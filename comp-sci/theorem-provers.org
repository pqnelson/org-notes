#+TITLE: On Theorem Provers
#+AUTHOR: Alex Nelson
#+EMAIL: pqnelson@gmail.com
#+DATE: <2020-12-26T10:47:33-08:00>
#+LANGUAGE: en
#+OPTIONS: H:5
#+HTML_DOCTYPE: html5
#+INCLUDE: ../org-macros.org
#+HTML_LINK_UP: ./index.html
#+HTML_LINK_HOME: ../index.html
#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="../css/stylesheet.css" />
# Created Saturday December 26, 2020 at 10:47AM

* Introduction
:PROPERTIES:
:CUSTOM_ID: h-6cd236b0-da47-4d1e-b956-7bac67f3d86f
:END:

There is much to say, too much. In the golden age of GOFAI, theorem
provers were considered an integral component to an agent's reasoning
capabilities. Needless to say, it didn't pan out, for AI. But in
mathematics, there is much use for theorem provers as a way to formalize
mathematics.


** Components of a Theorem Prover
:PROPERTIES:
:CUSTOM_ID: h-043b1579-6f46-4130-a530-a3778c6037db
:END:

Basically a theorem prover is an interpreter for a foundations of
mathematics. Andrej Bauer [[https://mathoverflow.net/a/376973/22457][argues]] the basic structure could be described
as several languages working together in concert:

- Kernel :: Validates every inference step and makes sure that proofs
  are correct, by implementing a formal system /F/ sufficiently
  expressive allowing the formalization of a large body of math,
  sufficiently simple for an efficient implementation.
- Vernacular :: The input language the user writes a proof in, which is
  typically complex and accomodates notational conventions.
- Elaborator :: Translates the vernacular into the kernel's formal system.
- Meta-Language :: Quite literally the programming language used to
  implement the kernel and elaborator.

** Vernacular
:PROPERTIES:
:CUSTOM_ID: h-0d8b24ba-8575-45c7-bd31-3d003d8bc87e
:END:

The design of the vernacular is quite difficult and under-studied. One
possible dichotomy is between a {{{define(Declarative)}}} style and a
{{{define(Procedural)}}} style. The former resembles how mathematicians
actually reason, the latter resembles how the kernel actually works.

We can combine these two together, as evidenced by Wiedijk's work ([[https://arxiv.org/abs/1201.3601][arXiv:1201.3601]]).

Mizar's [[http://www.mizar.org/language/mizar-grammar.xml][grammar]] is worth a case study in structuring a vernacular.

* Rapid Prototyping
:PROPERTIES:
:CUSTOM_ID: h-f631746a-da52-4b86-958f-8eb98d9593b4
:END:

We can implement theorem provers quickly in functional languages.
Indeed, [[file:sml.org][ML]] was invented specifically to implement the LCF theorem
prover. The use of algebraic data types was to implement the AST of
formulas and logical languages, etc.

We can use Lisp (e.g., [[https://github.com/latte-central/LaTTe][LaTTe]]).

** Formalizing Mathematics
:PROPERTIES:
:CUSTOM_ID: h-f26ec2ee-cdcd-4606-a006-5030d73f83ac
:END:

Actually, this is one of the least appreciated aspects of theorem
provers: that we're trying to invent a formal language for doing
mathematics. Instead, we end up with contrived proof formats and the
proof assistant communities are so insular they don't realize how
terrible it is.

What should be done instead is something like a "stepping stone" to
theorem provers by using a "[[https://en.wikipedia.org/wiki/Controlled_natural_language][structured subset]]" of English. We need to
identify the "subdomains" of mathematical practice, viz:

- Formulating definitions
- Stating theorems
- Writing proofs

As far as formulating definitions, although I'm a partisan for
Baez--Dolan "Stuff, Structure, Properties" (briefly discussed with
[[file:../math/category-theory/internalization.org][Internalization]]), there are times when it's clunky (in topology, field
theory and I suspect Galois theory). It may be useful to carve out the
notion of *adjectives* (e.g., 'we call a function "continuous" if
~<property>~').  At this point, it feels quite a bit like Mizar's
approach to definitions. For more on this, see:

- Josef Urban,\\
  "Translating Mizar for First Order Theorem Provers".\\
  In /Mathematical Knowledge Management: Proceedings of the Second International Conference/ 
  (Eds., A. Asperti, B. Buchberger, J.H. Davenport), Springer-Verlag, Lecture Notes in Computer Science vol 2594, 2003, pp. 203–215.

Stating theorems and proving them are rather tightly coupled.
We could try formalizing a basic [[file:../math/proof-steps.org][Mathematical Vernacular]], similar to
Wiedijk's variant of de Bruijn. This would give us proof steps, while
leaving "stating theorems" completely unspecified.

The main point I'd like to drive home, however: it is *wrong* to just
shrug and accept unintelligible commands as "the only way" to do theorem
proving. Our goal is not to update Russell and Whitehead's /Principia/
replacing archaic symbols with archaic keywords, nor should it be. Sadly
this is what procedural provers have become (looking at /you/, Lean
community).

* References
:PROPERTIES:
:CUSTOM_ID: h-936b2cbd-53e0-49b7-b496-052d2ba3b091
:END:

- John Harrison, Josef Urban and Freek Wiedijk,\\
  "History of Interactive Theorem Proving".\\
  [[https://www.cl.cam.ac.uk/~jrh13/papers/joerg.pdf][PDF]], 85 pages.
- Jeremy Avigad,\\
  "The design of mathematical language". \\
  [[http://philsci-archive.pitt.edu/19508/1/language_archive.pdf][PDF]], dated 29 Aug 2021, 35 pages (paper corresponding to a [[https://www.andrew.cmu.edu/user/avigad/Talks/design.pdf][talk]])

** Vernacular
:PROPERTIES:
:CUSTOM_ID: h-31684bce-5827-4fe5-b9cd-00405898307d
:END:

- John Harrison,\\
  "A Mizar Mode for HOL".\\
  [[https://www.cl.cam.ac.uk/~jrh13/papers/mizar.html][Eprint]], 19 pages.
- John Harrison,\\
  "Proof Style".\\
  [[https://www.cl.cam.ac.uk/~jrh13/papers/style.html][Eprint]], 19 pages.
- Freek Wiedijk,\\
  "A Synthesis of the Procedural and Declarative Styles of Interactive Theorem Proving".\\
  Eprint: [[https://arxiv.org/abs/1201.3601][arXiv:1201.3601]], 26 pages.

*** Mizar
:PROPERTIES:
:CUSTOM_ID: h-7f07b242-0684-49af-9b3a-53d89ab36cbf
:END:

- Andrzej Trybulec,\\
  "Some Features of the Mizar Language".\\
  [[http://mizar.org/project/trybulec93.pdf][Eprint]], 1993, 17 pages.
- Josef Urban,\\
  "Translating Mizar for First Order Theorem Provers".\\
  In /Mathematical Knowledge Management: Proceedings of the Second International Conference/ 
  (Eds., A. Asperti, B. Buchberger, J.H. Davenport), Springer-Verlag, Lecture Notes in Computer Science vol 2594, 2003, pp. 203–215.

** Mathematical Analysis in Theorem Provers
:PROPERTIES:
:CUSTOM_ID: h-f7b249a0-b1ec-4a8b-a5ca-303733594963
:END:

- Sylvie Boldo, Catherine Lelay, Guillaume Melquiond,\\
  "Formalization of Real Analysis: A Survey of Proof Assistants and Libraries".\\
  [[https://hal.inria.fr/hal-00806920v2/document][PDF]], 40 pages.
- Micaela Mayero,\\
  "Using theorem proving for numerical analysis: Correctness proof of an
  automatic differentiation algorithm".\\
  In {{{book-title(TPHOLs 2002: Theorem Proving in Higher Order Logics)}}},
  pp 246--262.