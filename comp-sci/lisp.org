#+TITLE: On Lisp
#+AUTHOR: Alex Nelson
#+EMAIL: pqnelson@gmail.com
#+LANGUAGE: en
#+OPTIONS: H:5
#+HTML_DOCTYPE: html5
# Created Wednesday December  9, 2020 at  6:49PM

* Overview

Lisp is the second-oldest high level language still used in
production (Fortran is the oldest). Unlike other languages, we
should think of Lisp at the level of abstract syntax trees, not
statements or expressions. This allows us to transcend petty
differences among languages.

Basically, if you want to create your own language but do not want
to be dragged down by writing a parser, then you really want a
Lisp. This is my own personal interest in Lisp: I want to have a
language which permits me to do symbolic computation, and I don't
care about syntax.

** Dialects

The two major dialects of Lisp are Scheme and Common Lisp. They
come from different philosophical schools of thought: Scheme is a
minimal language which encourages the programmer to develop their
own library; Common Lisp offers a lot of performant functions, and
powerful macros which are used to extend the language.

Emacs Lisp shares a common ancestor with Common Lisp, the two are
cousins in the Lisp family.

Clojure has sparked renewed interest in Lisp. It combines aspects
of Scheme and Common Lisp, with a heavy dose of functional
programming influenced by Haskell.
