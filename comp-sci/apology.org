#+TITLE: Apologia
#+AUTHOR: Alex Nelson
#+EMAIL: pqnelson@gmail.com
#+DATE: <2020-12-16T20:32:06-08:00>
#+LANGUAGE: en
#+OPTIONS: H:5
#+HTML_DOCTYPE: html5
# Created Wednesday December 16, 2020 at  8:32PM
#+INCLUDE: ../org-macros.org
#+HTML_LINK_UP: ./index.html
#+HTML_LINK_HOME: ../index.html
#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="../css/stylesheet.css" />

* Programming Language

I'm still debating the programming language I should use for this
endeavor. I want to use some Lisp, because Lisp supports symbolic
computation easily. Whenever possible, I'd prefer to use exact
results, which Lisp can facilitate more easily. Plus, Lisp has no
syntax, so there's no time wasted trying to figure out what's going
on with code.

At the same time, I wish to use IEEE floating point (which seems to
rule out Common Lisp, except =sbcl= and possibly a few other
implementations).  The easiest solution is to use SBCL, and not
worry about the details.  One way to resolve this problem is to
implement my own floating point arithmetic with arbitrary precision
algorithms, or fall back to using the GNU Scientific Library, or
something similar. I suppose I could write some unit tests to check
if the system uses IEEE floating point, so we can be certain.

[[http://www.femlisp.org][FEMLISP]] look interesting, it's a Common Lisp library for solving
partial differential equations via finite element methods.
