#+TITLE: Apologia
#+AUTHOR: Alex Nelson
#+EMAIL: pqnelson@gmail.com
#+DATE: <2020-12-16T20:32:06-08:00>
#+LANGUAGE: en
#+OPTIONS: H:5
#+HTML_DOCTYPE: html5
# Created Wednesday December 16, 2020 at  8:32PM
#+INCLUDE: ../org-macros.org
#+HTML_LINK_UP: ./index.html
#+HTML_LINK_HOME: ../index.html
#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="../css/stylesheet.css" />

* Programming Language
:PROPERTIES:
:CUSTOM_ID: h-a82e2b95-2055-45f6-9f75-91596f250b51
:END:

I'm still debating the programming language I should use for this
endeavor. Among the choices, it seems that [[file:lisp.org][Lisp]] is best prepared for my
task:

- Lisp has no syntax, so language extensions are natural, and
  everything has the same "sentence structure" (verb subject object)
- Macros make language extensions on par with special forms
- Symbolic computation can be handled easily and naturally (e.g., the
  [[https://github.com/pqnelson/auto-pse/blob/3b2d168/src/match.lisp][pattern matching code]] and [[https://github.com/pqnelson/auto-pse/blob/3b2d168/src/simplify.lisp][algebraic simplifier]] couldn't be easily done
  in non-Lisp)
- Lisp allows for Bignum computations, so integer and rational
  arithmetic is precise

At the same time, I wish to use IEEE floating point (which seems to
rule out Common Lisp, except =sbcl= and possibly a few other
implementations).  The easiest solution is to use SBCL, and not
worry about the details.  One way to resolve this problem is to
implement my own floating point arithmetic with arbitrary precision
algorithms, or fall back to using the [[https://www.gnu.org/software/gsl/][GNU Scientific Library]], or
something similar. I suppose I could write some unit tests to check
if the system uses IEEE floating point, so we can be certain.

#+NAME: h-rmk-femlisp
#+ATTR_HTML: :id h-rmk-femlisp 
#+begin_remark h-rmk-femlisp
[[http://www.femlisp.org][FEMLISP]] look interesting, it's a Common Lisp library for solving
partial differential equations via finite element methods.
#+end_remark

Scheme has the disadvantage of being interpreted (read: slow) and
limited support for macros. [[https://www.gnu.org/software/guile/][Guile]] looks like it remedies these problems
by having the programmer implement the critical parts in C, then embed a
Scheme interpreter/VM in the C code. I like this approach better.

- One problem with Guile is that complex numbers are necessarily inexact.
- On the other hand, arithmetic operators can be extended as if they
  were generic functions in Guile.

** Dialects
:PROPERTIES:
:CUSTOM_ID: h-79a28f2f-2488-40b0-ae54-8073b2aa6f05
:END:

*Scheme* is probably the first dialect most people encounter,
since it's used in the textbook
{{{book-title(Structure and Interpretation of Computer Programs)}}}
("SICP").
The Scheme dialect has the hall-mark of minimalism. In fact,
it's so minimal that the reader implements a scheme interpreter
in chapter 4 of {{{book-title(SICP)}}}.

*Common Lisp* emerged from the 1980s after Lisp 1 fractured in a
Cambrian explosion of dialects. Common Lisp sought to unite them all
into one common language. Unlike Scheme, Common Lisp compiles to machine
code, has a comparatively large number of functions (Scheme fits on a
cocktail napkin, Common Lisp requires a bit more space). This dialect
also has macros, which Scheme did not until relatively recently.

*Emacs Lisp* is a cousin to Common Lisp, because both descend from
Maclisp (a shared Cambrian ancestor). They share similar syntax, and are
about as distinct as Latin to modern Italian, or Urdu and Farsi.

*Clojure* is the newest dialect, which borrowed as heavily from Haskell
as from other Lisps. It uses immutability, emphasizes functional style,
and runs on the Java Virtual Machine or in the browser as Javascript.
While it has marginally cleaner syntax (using not just parentheses but
also square braces =[...]= for vectors, and braces ={...}= for hashmaps),
its STM memory model leads to accidentally bloated software all too easily.
** Flaws
:PROPERTIES:
:CUSTOM_ID: h-f4ba5355-ba33-4f28-b077-c30a6a828679
:END:

The biggest flaws that come to mind are figuring out which dialect to
use. Each of them have their quirks and shortcomings.

*** Scheme
:PROPERTIES:
:CUSTOM_ID: h-10500493-3ac4-48c9-951e-74a7b0e52494
:END:

**** No Canonical Implementation
:PROPERTIES:
:CUSTOM_ID: h-31198688-8e76-470a-8196-2954e63db051
:END:

One of the features of Scheme's minimalism is that it's not hard to
write your own Scheme interpreter. The problem: there are dozens of
Scheme implementations.

- MIT/GNU Scheme :: What /SICP/ and /SICM/ use
- Guile :: GNU's official Scheme implementation for extensible usage
- Racket :: Flashy new Scheme implementation
- Chicken :: Compiles Scheme to C
- Gambit :: Another Scheme-to-C compiler, plus an interpreter
- Chez Scheme :: An older implementation, among the fastest

And on and on and on. If starting from scratch, it's unclear which one
to pick, they're all decent choices. But each one has language-dependent
variations of expected features --- e.g., modules are either
unimplemented or use different syntax.

Although I /really/ like Guile, I'm afraid it may be unstable and remove
functionality I'd use.

*** Common Lisp
:PROPERTIES:
:CUSTOM_ID: h-00b3a4bb-8be3-4ea1-b3f8-cfa573ba9579
:END:

Probably the biggest complaint is how baroque the language is (for
example: =setf= and =setq= are both included, but only one is really
needed). Equality testing also exemplifies this problem (we have ~=~ for
numbers, ~eq~ for pointers, ~eql~ for pointers or numbers, ~equal~, and
~equalp~, but we'll need to roll our own if we want equality of CLOS
instances [objects]).

**** Floating Point Arithmetic isn't part of the Standard
:PROPERTIES:
:CUSTOM_ID: h-873760ae-9db9-424e-bda5-39a4746dee67
:END:

The Language standard was written before IEEE 754 floating point was
finalized (or written), so this is a serious shortcoming with Common
Lisp for numerical analysts. Since it's not part of the standard, it's
not /violating/ the standard to use IEEE floating point arithmetic. But
it's just compiler dependent.

- SBCL uses IEEE-754 on x86
- ABCL uses IEEE-754 if the JVM running it uses the standard

*** Clojure
:PROPERTIES:
:CUSTOM_ID: h-929f80eb-b3c3-4c47-b41f-9abd0bc46b36
:END:

Slow startup with repls and bloated software are two of the biggest
issues facing Clojure.

**** Memory Usage
:PROPERTIES:
:CUSTOM_ID: h-412e8188-b046-4b4b-9aaa-41d8764c3ef4
:END:

Clojure's memory usage can easily run out of control. The STM memory
model requires greater diligence when programming, otherwise duplicate
data can be created and not freed all-too-easily by accident. For
example, holding onto the head of a cons will keep the rest of the list,
even if the rest of the list is not needed or used. The JVM garbage
collector doesn't seem to handle this memory model all too well, either.

This frequently leads to rewriting the code in Java.

**** There is no standard
:PROPERTIES:
:CUSTOM_ID: h-49ce9144-6029-451d-95bd-fb3ef3864168
:END:

Unlike Scheme and Common Lisp, there is no standard. So, is =mapcat=
doing what I expect? Erm...maybe?

**** JVM Historically didn't have IEEE 754 floating point
:PROPERTIES:
:CUSTOM_ID: h-86c65538-7974-4832-958a-f809c15c3417
:END:

This may be a subtle source of bugs, but floating point support is
comparatively modern. For old-timers using JVM 6 (or whatever), this is
problematic.

** Further Reading
:PROPERTIES:
:CUSTOM_ID: h-b5520db7-1764-4f43-87d0-7f901bfe2709
:END:

- Antoine Kalmbach, [[https://ane.github.io/2020/10/05/between-two-lisps.html][Between two Lisps]]. Posted Oct 5, 2020.
- Antoine Kalmbach, [[https://ane.github.io/programming/lisp/goops-virtual-slots-and-ffi.html][Recutils, GOOPS and virtual slots]]. Posted Dec 6, 2020.
- [[http://jakob.space/blog/thoughts-on-lisps.html][Thoughts on Lisps]] compares various implementations of Scheme and
  Common Lisp for performance and clarity
- [[http://www.p-cos.net/lisp/guide.html][Pascal Costanza's Highly Opinionated Guide to Lisp]]
- [[https://www-fourier.ujf-grenoble.fr/~sergerar/Papers/Packaging.pdf][Packages in Common Lisp, a tutorial]] (PDF)
