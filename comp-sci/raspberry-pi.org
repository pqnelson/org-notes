#+TITLE: Raspberry Pi
#+AUTHOR: Alex Nelson
#+EMAIL: pqnelson@gmail.com
#+DATE: <2021-02-15T15:07:15-08:00>
#+LANGUAGE: en
#+OPTIONS: H:5
#+HTML_DOCTYPE: html5
#+INCLUDE: ../org-macros.org
#+HTML_LINK_UP: ./index.html
#+HTML_LINK_HOME: ../index.html
#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="../css/stylesheet.css" />
# Created Monday February 15, 2021 at  3:07PM

* Overview
:PROPERTIES:
:CUSTOM_ID: h-2139284d-7b5c-46c8-abce-c3ede3b2b67f
:END:

I've got a Raspberry Pi 3 lying around, and I've been interested in
[[file:lisp/machine.org][Lisp Machines]] for a bit. Daniel Szmulewicz wrote a [[https://danielsz.github.io/blog/blog_on_lisp.html][blog post]] on treating
a Raspberry Pi as an /ersatz/ Lisp Machine. Since my machine is on the
older side, and has been lying around for a while (it still runs Debian
Jessie), I thought I'd document my attempt to update it and install
Lisp tools on it.

(Apparently I have a Raspberry Pi 2.)

* Ssh into the Pi
:PROPERTIES:
:CUSTOM_ID: h-bd448f65-3561-4ce8-90da-580ef958cee7
:END:

We can ssh into Raspberry Pi by enabling ssh (the openssh-server seems
to be installed but not yet enabled), then we can simply do
~ssh <user>@raspberrypi.local~ to

* Debian Infrastructure
:PROPERTIES:
:CUSTOM_ID: h-b0d187d2-f502-4a62-9dd4-a6fd994a903a
:END:

Running the update can be time-consuming. Basically I updated the
~/etc/apt/sources.list~ and ~/etc/apt/sources.list.d/raspi.list~ to use
the stretch repositories, uninstalled a few un-needed (or unused)
packages (~scratch*~, minecraft-pi, ~libreoffice*~, sonic-pi),
ran a ~sudo apt-get update && sudo apt-get upgrade -y && sudo apt clean~
followed by a ~sudo apt-get dist-upgrade -y && sudo apt-get clean~.
This took a few hours.

Then I ran ~sudo rpi-update~ to update the firmware.

** Optimizing for my local computer
:PROPERTIES:
:CUSTOM_ID: h-75c9966a-5592-4ae4-a025-80e0e6c34f6a
:END:

I noticed that, for GCC, the flag =-Os= optimizes for size. Since
there's only so little room for things on the Pi, I decided to install
apt-build and these go into ~/etc/apt/apt-build.conf~, then I can use
=sudo apt-build install ...= instead of apt-get.

** Upgrading to Bullseye
:PROPERTIES:
:CUSTOM_ID: h-4cb12e4d-ab7f-466c-b7b5-d69daec934b8
:END:

I didn't want to start from scratch, so I simply did the following:

#+begin_example
~$ cd /etc/apt/
/etc/apt$ sudo cp sources.list sources.list.bak
/etc/apt$ sudo nano sources.list
#+end_example

Then I made ~sources.list~ look like (replacing all instances of
"buster" by "bullseye"):

#+begin_example
# sources.list
deb http://raspbian.raspberrypi.org/raspbian/ bullseye main contrib non-free rpi
#+end_example

I saved it, closed nano, then ran the commands:

#+begin_example
/etc/apt$ sudo apt update
...
/etc/apt$ sudo apt upgrade -y
...
/etc/apt$ sudo apt dist-upgrade -y
...
/etc/apt$ sudo apt autoclean
...
/etc/apt$ sudo reboot
#+end_example

* Installing Emacs
:PROPERTIES:
:CUSTOM_ID: h-c5576d86-7d9e-46e1-b3eb-d81187d6e67f
:END:

I pulled down Emacs from the git repository:

#+ATTR_HTML: :id ex-build-emacs
#+begin_example
~/$ cd src
~/src/$ git clone --depth 1 --branch emacs-27 https://git.savannah.gnu.org/git/emacs.git
...
~/src/$ cd emacs
~/src/emacs/$ sudo apt-get build-dep emacs
#+end_example

We need to install the GNU-Autotools:

#+ATTR_HTML: :id ex-gnu-autotools
#+begin_example
~/src/emacs/$ sudo apt-get install autoconf automake
#+end_example

We can try installing the dependencies, but will also have to install
the =dev= version of the libraries:

#+ATTR_HTML: :id ex-build-dep-emacs
#+begin_example
~/src/emacs/$ sudo apt-get build-dep emacs
...
~/src/emacs/$ sudo apt-get install libm17n-dev libgif-dev libxpm-dev libtiff5-dev
...
~/src/emacs/$ sudo apt-get install libpng-dev gnutls-dev texinfo libjansson-dev
...
~/src/emacs/$ sudo apt-get install build-essential libx11-dev libjpeg-dev libpng-dev libgif-dev libxaw-dev libncurses-dev libgnutls28-dev 
...
#+end_example

Now for the configuration

#+ATTR_HTML: :id emacs-autogen
#+begin_example
~/src/emacs/$ ./autogen.sh
~/src/emacs/$ ./configure --with-x-toolkit=no --with-m17n-flt --with-modules CFLAGS="-mtune=native -mcpu=native -Os -marm"
#+end_example

If you configure with ~-Ofast~ you need to also include
~-fno-finite-math-only~ too (or else when you run ~make~, you'll get an
error saying Emacs won't compile with ~-ffinite-math-only~).

** Attempting Configuration
:PROPERTIES:
:CUSTOM_ID: h-505fbdb9-12a4-46d8-9daf-46229887468f
:END:

#+begin_example
~/src/emacs/$ git clean -dxf
~/src/emacs/$ ./autogen.sh
~/src/emacs/$ ./configure --with-m17n-flt --with-modules --with-json --with-threads --with-included-regex --with-compress-install CFLAGS="-Ofast -mtune=native -mcpu=native -marm"
#+end_example

I also need to make sure I have ~libncurses-dev~ installed and,
depending on the configuration choices:

- ~--with-x-toolkit=motif~ requires ~libmotif-dev~
- ~--with-x-toolkit=lucid~ requires ~libxaw7-dev~ being installed
- ~--with-xft~ requires installing ~libxft-dev~


*** For Emacs 28
:PROPERTIES:
:CUSTOM_ID: h-a901d579-d540-41fe-a551-380de73e0cfd
:END:

After tinkering around, Emacs 28 came out! Unfortunately, the above
commands clone exactly the ~emacs-27~ branch, and makes it impossible to
change to the ~emacs-28~ branch.

#+begin_example
~/src/ $ git clone https://git.savannah.gnu.org/git/emacs.git
~/src/ $ cd emacs
~/src/emacs/ $ git checkout emacs-28
~/src/emacs/ $ sudo apt install libgccjit-10-dev libharfbuzz-dev
~/src/emacs/ $ ./configure --with-wide-int --disable-year2038 --with-x-toolkit=lucid --with-gnutls=ifavailable --with-m17n-flt --with-modules --with-json --with-threads --with-compress-install CFLAGS="-O3 -pipe -mtune=native -mcpu=native -marm"
...
~/src/emacs/ $ make
...
~/src/emacs/ $ 
#+end_example

I wanted to include the option ~--with-native-compilation~ but it
creates segmentation faults. For this reason, I ended up leaving it
off. It could be some issue with the version of the library, or something.
(Note: if you are using GCC version 10, this will work. If you are using
version X, you need to install ~libgccjit-X-dev~.)

- ~wide-int~ uses a 60-bit integer instead of a 32-bit integer
- ~disable-year2038~ deals with [[https://en.wikipedia.org/wiki/Year_2038_problem][Year 2038 problem]], y2k's bigger brother
- ~modules~ I'm not sure what it does (something something
  dynamic modules something something), but it's highly recommended
- ~json~ for native JSON libraries
- ~threads~ uses pthreads
- ~compress-install~
- ~CFLAGS="-O3 -mtune=native -mcpu=native -marm"~ for additional optimizations

** Improving Startup Time
:PROPERTIES:
:CUSTOM_ID: h-f94a466e-fdf6-40ed-a476-0f3572fc9b7c
:END:

I noticed the startup time was rather slow. The =(emacs-init-time)=
reports it took 10.46182 seconds without optimization for my default
init file. (My laptop with two Intel Core2 duos, at 2.80GHz, reports a
3.065432256 second init-time.)

Setting =gc-cons-threshold= to 10000000 improved performance by about
40%, =(emacs-init-time)= reduces to 6.671090814 seconds. Bumping it up
to 10^8 barely improves performance, =(emacs-init-time)= reports 6.44
seconds.

I changed all the =(require 'foo)= calls to
=(use-package foo :ensure t :defer t)=, which improved startup time by
about a couple of second (4.426073247 seconds).

This is all done with emacs compiled =-Os=; if I instead did =-O3=,
redid the byte-compilation of ~init.el~, I get startup time in 3.67300
seconds. If I further compiled with =-Ofast=, I get startup time in
3.713 seconds.

* Installing Common Lisp
:PROPERTIES:
:CUSTOM_ID: h-b5a0f4e9-867a-4cc6-bfce-50c097dc09b9
:END:

I'm not sure what happened, but somehow I had SBCL 1.4 installed on my
Raspberry Pi already. I was suspicious of this, and remain so to date.

** Clozure Common Lisp
:PROPERTIES:
:CUSTOM_ID: h-de3ba0b9-0cd1-407f-bc3b-2d4aa9c2ba88
:END:

One Common Lisp compiler which emerged from the '80s was Clozure Common
Lisp. Well, it was forked from Macintosh Common Lisp, which ran on a
computer with only a few Megabytes of RAM at the time. We have similar
constraints for the Raspberry Pi today (at least, I do).

I followed Rainer's [[https://web.archive.org/web/20121010001720/http://lispm.dyndns.org/ccl][instructions]] .

#+ATTR_HTML: :id building-clozure
#+begin_example
~/src/$ git clone https://github.com/Clozure/ccl/
...
~/src/$ cd ccl/
~/src/ccl/$ git checkout v1.12-dev.1
~/src/ccl/$ cd lisp-kernel/linuxarm
~/src/ccl/lisp-kernel/linuxarm/$ make clean; make
...
~/src/ccl/lisp-kernel/linuxarm/$ cd ../..
~/src/ccl/$ ./scripts/get-binaries linuxarm
...
~/src/ccl/$ ./armcl

? (ccl:rebuild-ccl :full t)
...
#+end_example

There is a bug with ~optimizers.lisp~ which hangs on master branch.
It should take less than a minute to finish ~optimizers.lisp~, so if
it's taking longer...it's probably a bug. (I have found the
~v1.12-dev.1~, ~v1.12-dev.2~, ~v1.12-dev.3~, ~v1.12-dev.4~ tags are
capable of rebuilding as expected.)

The ~armcl~ binary is 633788 bytes initially, and the ~armcl.image~ is
22347792 bytes big. After rebuilding ~v1.12-dev.1~, the binary is the
same size, but the ~armcl.image~ is 17100816 bytes (and in ~v1.12-dev.4~,
17158160 bytes).

*** Making =armcl= global
:PROPERTIES:
:CUSTOM_ID: h-96d3a59c-e1bb-4e11-8c10-7ccd6d9b7f5e
:END:

I also ran

#+ATTR_HTML: :id armcl
#+begin_example
~/src/$ sudo ln -s /home/alex/src/ccl/armcl /usr/local/bin/armcl
#+end_example

This let me run armcl for any user.

** SBCL
:PROPERTIES:
:CUSTOM_ID: h-35bc094e-a63f-4ba0-9b30-6d6582bf9869
:END:

Now, Raspberry Pi offers SBCL 2.1.9, which installs without problem.
Wonderful! I don't need to stress over compiling CCL properly.

*** Compiling SBCL Problems
:PROPERTIES:
:CUSTOM_ID: h-f0715bd5-5e1a-436a-b786-850061f4a5fd
:END:

I run into a problem compiling SBCL from the RPi package, experiencing
an error (as of git commit ~b430f314c~, date Wed Apr 20 03:46:44 2022 +0300):

#+begin_example
~/src/sbcl $ sh make.sh
...
cc -g -Wall -Wundef -Wsign-compare -Wpointer-arith -O3 -std=gnu99 -fno-pie -I.  -c -o os-common.o os-common.c
In file included from os-common.c:24:
genesis/symbol.h: In function 'symbol_package_id':
genesis/symbol.h:44:72: warning: right shift count >= width of type [-Wshift-count-overflow]
   44 | nline int symbol_package_id(struct symbol* s) { return s->name >> 48; }
      |                                                                ^~

In file included from os-common.c:26:
thread.h: In function 'tls_index_of':
thread.h:151:25: warning: right shift count >= width of type [-Wshift-count-overflow]
  151 |   return symbol->header >> 32;
      |                         ^~
In file included from os-common.c:85:
sys_mmap.inc: In function 'sbcl_mmap':
sys_mmap.inc:26:27: error: 'SYS_mmap' undeclared (first use in this function); did you mean 'SYS_mmap2'?
   26 |     return (void*)syscall(SYS_mmap, addr, length, prot, flags, fd, offset);
      |                           ^~~~~~~~
      |                           SYS_mmap2
sys_mmap.inc:26:27: note: each undeclared identifier is reported only once for each function it appears in
In file included from target-os.h:32,
                 from os.h:59,
                 from globals.h:19,
                 from os-common.c:18:
os-common.c: In function 'os_context_pc':
target-arch-os.h:13:52: error: 'mcontext_t' has no member named 'pc'
   13 | #define OS_CONTEXT_PC(context) context->uc_mcontext.pc
      |                                                    ^
os-common.c:349:12: note: in expansion of macro 'OS_CONTEXT_PC'
  349 |     return OS_CONTEXT_PC(context);
      |            ^~~~~~~~~~~~~
os-common.c: In function 'set_os_context_pc':
target-arch-os.h:13:52: error: 'mcontext_t' has no member named 'pc'
   13 | #define OS_CONTEXT_PC(context) context->uc_mcontext.pc
      |                                                    ^
os-common.c:352:5: note: in expansion of macro 'OS_CONTEXT_PC'
  352 |     OS_CONTEXT_PC(context) = pc;
      |     ^~~~~~~~~~~~~
os-common.c: In function 'os_context_pc_addr':
target-arch-os.h:13:52: error: 'mcontext_t' has no member named 'pc'
   13 | #define OS_CONTEXT_PC(context) context->uc_mcontext.pc
      |                                                    ^
os-common.c:355:38: note: in expansion of macro 'OS_CONTEXT_PC'
  355 |     return (os_context_register_t*)&(OS_CONTEXT_PC(context));
      |                                      ^~~~~~~~~~~~~
In file included from os-common.c:85:
sys_mmap.inc: In function 'sbcl_mmap':
sys_mmap.inc:30:1: warning: control reaches end of non-void function [-Wreturn-type]
   30 | }
      | ^
os-common.c: In function 'os_context_pc':
os-common.c:350:1: warning: control reaches end of non-void function [-Wreturn-type]
  350 | }
      | ^
os-common.c: In function 'os_context_pc_addr':
os-common.c:356:1: warning: control reaches end of non-void function [-Wreturn-type]
  356 | }
      | ^
make: *** [<builtin>: os-common.o] Error 1
make: Leaving directory '/home/alex/src/sbcl/src/runtime'
~/src/sbcl $
#+end_example

I think this is because I have ~arm_64bit=1~ in my ~/boot/config.txt~?
If I remove it, I run into other problems (SBCL cannot determine the
CPU architecture properly).

** Adding Quicklisp
:PROPERTIES:
:CUSTOM_ID: h-caf05a1b-6f16-4430-a62b-200f4c5bd753
:END:

We get quicklisp:

#+ATTR_HTML: :id quicklisp
#+begin_example
~/$ wget http://beta.quicklisp.org/quicklisp.lisp
...
~/$ armcl
? (load "quicklisp.lisp")
? (quicklisp-quickstart:install)
#+end_example

Then we append to (or create) the file =~/.ccl-init.lisp= with the
following content:

#+ATTR_HTML: :id ccl-quicklisp-init
#+begin_src lisp
(defun load-quicklisp ()
  (let ((quicklisp-init (merge-pathnames "quicklisp/setup.lisp"
                                         (user-homedir-pathname))))
    (when (probe-file quicklisp-init)
      (load quicklisp-init))))
#+end_src

*CAUTION:* this will /not/ load quicklisp by default, but require you to
call =(load-quicklisp)= when you need/want it. If you want it loaded by
default, you could just add a =(load-quicklisp)= line to the
=~/.ccl-init.lisp= file.

* LaTeX
:PROPERTIES:
:CUSTOM_ID: h-69ecc133-c067-40e8-a9ba-bc0589a99914
:END:

- Installing ~texlive-base~ will install TeX, pdfTeX, cweb, metapost, and
  a few other basic TeX packages.
- ~texlive-latex-base~ installs LaTeX


* Stumpwm
:PROPERTIES:
:CUSTOM_ID: h-3b62ead8-4526-46b2-a922-92053432e1c3
:END:
** Dependencies
:PROPERTIES:
:CUSTOM_ID: h-c596939f-a681-4092-9c95-a4245ff3b73b
:END:

Trying to run ~sudo apt-get build-dep stumpwm~ will install a number of
common lisp dependencies, which quicklisp would automatically handle.

* Window Managers
:PROPERTIES:
:CUSTOM_ID: h-a66006a4-533e-4994-be5f-307174039327
:END:

I may want to consider looking at other window managers (ahem, /window/ shopping?).


- [[https://l3net.wordpress.com/2014/02/15/a-memory-comparison-of-light-linux-desktops-part-3/][A Memory Comparison of Light Linux Desktops – Part 3]]
- [[https://www.linuxquestions.org/questions/linux-desktop-74/memory-comparison-of-really-light-linux-wms-desktops-4175605421/][Memory Comparison of Really Light Linux WMs / Desktops]]
- [[https://www.reddit.com/r/unixporn/comments/4tfdzu/ram_usage_of_small_window_managers_a_comparison/][RAM Usage of small window managers - a comparison]]

** TWM
:PROPERTIES:
:CUSTOM_ID: h-0aed8294-f790-4e82-bf2c-5707990dd55f
:END:

- [[https://wiki.archlinux.org/title/twm][Arch Linux Wiki page]]
- [[https://opensource.com/article/19/12/twm-linux-desktop][Get back to basics with the TWM Linux desktop]]

** FVWM
:PROPERTIES:
:CUSTOM_ID: h-fa7f411e-d0be-4c94-8277-87cabddb3838
:END:

I have decided to install FVWM, which can be done with
~sudo apt-get install xserver-xorg xinit fvwm xterm~

Whenever I log in, I have to manually start FVWM by the command ~startx~.

As far as customizing FVWM, well, I have yet to do much in that
department yet.

- [[https://wiki.archlinux.org/title/FVWM][Arch Linux Wiki page]]
** Feh wallpaper
:PROPERTIES:
:CUSTOM_ID: h-717e12d7-08bc-4320-a5e2-60782ef467b7
:END:

I am using a script
#+begin_src bash
#!/usr/local/bin/bash

sleep 10

while true; do
feh --no-fehbg -F -r --bg-max -z /home/alex/Pictures/Wallpaper && sleep 5 || exit
done
#+end_src



AddToFunc InitFunction
+ I exec /home/alex/.fvwm/bg.sh

AddToFunc RestartFunction
+ I exec /home/alex/.fvwm/bg.sh

** URXVT Terminal
:PROPERTIES:
:CUSTOM_ID: h-42f8cb5f-78d3-4c5b-9aed-9471a4249dfa
:END:

Instead of ~xterm~, one could instead install ~rxvt-unicode~ which is
very nift.

- [[https://opensource.com/article/19/10/why-use-rxvt-terminal][Why use RXVT Terminal]]

* Temperature Checking
:PROPERTIES:
:CUSTOM_ID: h-70ef8113-f25f-4e98-96eb-f65586aa779a
:END:

For my Raspberry Pi 2, I can check the temperature by running the
command =/opt/vc/bin/vcgencmd measure_temp=. I've stuck this into a
script:

#+begin_example
#!/bin/bash

# ~/temperature.sh

/opt/vc/bin/vcgencmd measure_temp
#+end_example

* Mizar
:PROPERTIES:
:CUSTOM_ID: h-547100f8-09b9-4160-ae84-9e2fea00aba5
:END:

I couldn't get Mizar working on my Raspberry Pi 2, but it works on
Raspberry Pi 4B. Get the latest version [[http://mizar.uwb.edu.pl/system/index.html#download][here]] for Linux (ARM).

#+begin_example
~/src/$ mkdir mizar
~/src/$ cd mizar
~/src/mizar/$ wget mizar-<version>-arm-linux.tar
...
~/src/mizar/$ tar -xvf mizar-...-linux.tar
...
~/src/mizar/$ sudo ./install.sh
...
#+end_example

When I try running, say, ~mizf~ on 32-bit mode, I get errors:

#+begin_example
alex@raspberrypi:~/src/mizar-playground $ mizf text/char.miz
Illegal instruction
Illegal instruction
Illegal instruction
alex@raspberrypi:~/src/mizar-playground $ 
#+end_example

In 64-bit mode, I get errors:
#+begin_example
alex@raspberrypi:~/src/mizar-playground $ mizf text/char
/usr/local/bin/mizf: 8: makeenv: Exec format error
/usr/local/bin/mizf: 13: errflag: Exec format error
/usr/local/bin/mizf: 14: addfmsg: Exec format erro
#+end_example

* Run 64-bit mode
:PROPERTIES:
:CUSTOM_ID: h-cd1194c0-4b09-4fd9-810c-044b646f78f9
:END:

To make Raspberry Pi 4 run in 64-bit mode, add the following line to the
bottom of your ~/boot/config.txt~:

#+begin_example
arm_64bit=1
#+end_example

- [[https://www.raspberrypi.com/documentation/computers/config_txt.html][Confix.txt documentation]]

* Other Links
:PROPERTIES:
:CUSTOM_ID: h-88c07655-f971-4a20-b7f9-3f75d70adacd
:END:

- [[http://informatimago.com/articles/raspberrypi/ccl-sur-qemu.html][CCL on RPi]] (French)
- [[http://thisoldlisp.com/talks/els-2018/][This Old Lisp]]
- [[http://lispm.de/ccl][CCL on Raspberry Pi]], Rainer's tutorial/notes
- [[http://christophe.rhodes.io/notes/blog/feeds/lisp/][Christophe Rhodes on Lisp]]
- [[http://jacek.zlydach.pl/blog/2015-03-07-lisp-on-raspberry-pi-2-part-1-setting-up.html][Lisp on Raspberry Pi, Part 2]]
