#+TITLE: Raspberry Pi
#+AUTHOR: Alex Nelson
#+EMAIL: pqnelson@gmail.com
#+DATE: <2021-02-15T15:07:15-08:00>
#+LANGUAGE: en
#+OPTIONS: H:5
#+HTML_DOCTYPE: html5
#+INCLUDE: ../org-macros.org
#+HTML_LINK_UP: ./index.html
#+HTML_LINK_HOME: ../index.html
#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="../css/stylesheet.css" />
# Created Monday February 15, 2021 at  3:07PM

* Overview
:PROPERTIES:
:CUSTOM_ID: h-2139284d-7b5c-46c8-abce-c3ede3b2b67f
:END:

I've got a Raspberry Pi 3 lying around, and I've been interested in
[[file:lisp/machine.org][Lisp Machines]] for a bit. Daniel Szmulewicz wrote a [[https://danielsz.github.io/blog/blog_on_lisp.html][blog post]] on treating
a Raspberry Pi as an /ersatz/ Lisp Machine. Since my machine is on the
older side, and has been lying around for a while (it still runs Debian
Jessie), I thought I'd document my attempt to update it and install
Lisp tools on it.

(Apparently I have a Raspberry Pi 4B.)

* Ssh into the Pi
:PROPERTIES:
:CUSTOM_ID: h-bd448f65-3561-4ce8-90da-580ef958cee7
:END:

We can ssh into Raspberry Pi by enabling ssh (the openssh-server seems
to be installed but not yet enabled), then we can simply do
~ssh <user>@raspberrypi.local~ to

* Debian Infrastructure
:PROPERTIES:
:CUSTOM_ID: h-b0d187d2-f502-4a62-9dd4-a6fd994a903a
:END:

Running the update can be time-consuming. Basically I updated the
~/etc/apt/sources.list~ and ~/etc/apt/sources.list.d/raspi.list~ to use
the stretch repositories, uninstalled a few un-needed (or unused)
packages (~scratch*~, minecraft-pi, ~libreoffice*~, sonic-pi),
ran a ~sudo apt-get update && sudo apt-get upgrade -y && sudo apt clean~
followed by a ~sudo apt-get dist-upgrade -y && sudo apt-get clean~.
This took a few hours.

Then I ran ~sudo rpi-update~ to update the firmware.

** Optimizing for my local computer
:PROPERTIES:
:CUSTOM_ID: h-75c9966a-5592-4ae4-a025-80e0e6c34f6a
:END:

I noticed that, for GCC, the flag =-Os= optimizes for size. Since
there's only so little room for things on the Pi, I decided to install
apt-build and these go into ~/etc/apt/apt-build.conf~, then I can use
=sudo apt-build install ...= instead of apt-get.

* Installing Emacs
:PROPERTIES:
:CUSTOM_ID: h-c5576d86-7d9e-46e1-b3eb-d81187d6e67f
:END:

I pulled down Emacs from the git repository:

#+ATTR_HTML: :id ex-build-emacs
#+begin_example
~/$ cd src
~/src/$ git clone --depth 1 --branch emacs-27 https://git.savannah.gnu.org/git/emacs.git
...
~/src/$ cd emacs
~/src/emacs/$ sudo apt-get build-dep emacs
#+end_example

We need to install the GNU-Autotools:

#+ATTR_HTML: :id ex-gnu-autotools
#+begin_example
~/src/emacs/$ sudo apt-get install autoconf automake
#+end_example

We can try installing the dependencies, but will also have to install
the =dev= version of the libraries:

#+ATTR_HTML: :id ex-build-dep-emacs
#+begin_example
~/src/emacs/$ sudo apt-get build-dep emacs
...
~/src/emacs/$ sudo apt-get install libm17n-dev libgif-dev libxpm-dev libtiff5-dev
...
~/src/emacs/$ sudo apt-get install libpng-dev gnutls-dev texinfo
#+end_example

Now for the configuration

#+ATTR_HTML: :id emacs-autogen
#+begin_example
~/src/emacs/$ ./autogen.sh
~/src/emacs/$ ./configure --with-x-toolkit=no --with-m17n-flt --with-modules CFLAGS="-mtune=native -mcpu=native -Os -marm"
#+end_example

If you configure with ~-Ofast~ you need to also include
~-fno-finite-math-only~ too (or else when you run ~make~, you'll get an
error saying Emacs won't compile with ~-ffinite-math-only~).

** Improving Startup Time
:PROPERTIES:
:CUSTOM_ID: h-f94a466e-fdf6-40ed-a476-0f3572fc9b7c
:END:

I noticed the startup time was rather slow. The =(emacs-init-time)=
reports it took 10.46182 seconds without optimization for my default
init file. (My laptop with two Intel Core2 duos, at 2.80GHz, reports a
3.065432256 second init-time.)

Setting =gc-cons-threshold= to 10000000 improved performance by about
40%, =(emacs-init-time)= reduces to 6.671090814 seconds. Bumping it up
to 10^8 barely improves performance, =(emacs-init-time)= reports 6.44
seconds.

I changed all the =(require 'foo)= calls to
=(use-package foo :ensure t :defer t)=, which improved startup time by
about a couple of second (4.426073247 seconds).

This is all done with emacs compiled =-Os=; if I instead did =-O3=,
redid the byte-compilation of ~init.el~, I get startup time in 3.67300
seconds. If I further compiled with =-Ofast=, I get startup time in
3.713 seconds.

* Installing Common Lisp
:PROPERTIES:
:CUSTOM_ID: h-b5a0f4e9-867a-4cc6-bfce-50c097dc09b9
:END:

I'm not sure what happened, but somehow I had SBCL 1.4 installed on my
Raspberry Pi already. I was suspicious of this, and remain so to date.

** Clozure Common Lisp
:PROPERTIES:
:CUSTOM_ID: h-de3ba0b9-0cd1-407f-bc3b-2d4aa9c2ba88
:END:

One Common Lisp compiler which emerged from the '80s was Clozure Common
Lisp. Well, it was forked from Macintosh Common Lisp, which ran on a
computer with only a few Megabytes of RAM at the time. We have similar
constraints for the Raspberry Pi today (at least, I do).

I followed Rainer's [[https://web.archive.org/web/20121010001720/http://lispm.dyndns.org/ccl][instructions]] .

#+ATTR_HTML: :id building-clozure
#+begin_example
~/src/$ git clone https://github.com/Clozure/ccl/
...
~/src/$ cd ccl/
~/src/ccl/$ git checkout v1.12-dev.1
~/src/ccl/$ cd lisp-kernel/linuxarm
~/src/ccl/lisp-kernel/linuxarm/$ make clean; make
...
~/src/ccl/lisp-kernel/linuxarm/$ cd ../..
~/src/ccl/$ ./scripts/get-binaries linuxarm
...
~/src/ccl/$ ./armcl

? (ccl:rebuild-ccl :full t)
...
#+end_example

There is a bug with ~optimizers.lisp~ which hangs on master branch.
It should take less than a minute to finish ~optimizers.lisp~, so if
it's taking longer...it's probably a bug. (I have found the
~v1.12-dev.1~, ~v1.12-dev.2~, ~v1.12-dev.3~, ~v1.12-dev.4~ tags are
capable of rebuilding as expected.)

The ~armcl~ binary is 633788 bytes initially, and the ~armcl.image~ is
22347792 bytes big. After rebuilding ~v1.12-dev.1~, the binary is the
same size, but the ~armcl.image~ is 17100816 bytes (and in ~v1.12-dev.4~,
17158160 bytes).

*** Making =armcl= global
:PROPERTIES:
:CUSTOM_ID: h-96d3a59c-e1bb-4e11-8c10-7ccd6d9b7f5e
:END:

I also ran

#+ATTR_HTML: :id armcl
#+begin_example
~/src/$ sudo ln -s /home/alex/src/ccl/armcl /usr/local/bin/armcl
#+end_example

This let me run armcl for any user.

** Adding Quicklisp
:PROPERTIES:
:CUSTOM_ID: h-caf05a1b-6f16-4430-a62b-200f4c5bd753
:END:

We get quicklisp:

#+ATTR_HTML: :id quicklisp
#+begin_example
~/$ wget http://beta.quicklisp.org/quicklisp.lisp
...
~/$ armcl
? (load "quicklisp.lisp")
? (quicklisp-quickstart:install)
#+end_example

Then we append to (or create) the file =~/.ccl-init.lisp= with the
following content:

#+ATTR_HTML: :id ccl-quicklisp-init
#+begin_src lisp
(defun load-quicklisp ()
  (let ((quicklisp-init (merge-pathnames "quicklisp/setup.lisp"
                                         (user-homedir-pathname))))
    (when (probe-file quicklisp-init)
      (load quicklisp-init))))
#+end_src

*CAUTION:* this will /not/ load quicklisp by default, but require you to
call =(load-quicklisp)= when you need/want it. If you want it loaded by
default, you could just add a =(load-quicklisp)= line to the
=~/.ccl-init.lisp= file.

* Stumpwm
:PROPERTIES:
:CUSTOM_ID: h-3b62ead8-4526-46b2-a922-92053432e1c3
:END:
** Dependencies
:PROPERTIES:
:CUSTOM_ID: h-c596939f-a681-4092-9c95-a4245ff3b73b
:END:

Trying to run ~sudo apt-get build-dep stumpwm~ will install a number of
common lisp dependencies, which quicklisp would automatically handle.

* Window Managers

I may want to consider looking at other window managers (ahem, /window/ shopping?).


- [[https://l3net.wordpress.com/2014/02/15/a-memory-comparison-of-light-linux-desktops-part-3/][A Memory Comparison of Light Linux Desktops â€“ Part 3]]
- [[https://www.linuxquestions.org/questions/linux-desktop-74/memory-comparison-of-really-light-linux-wms-desktops-4175605421/][Memory Comparison of Really Light Linux WMs / Desktops]]
- [[https://www.reddit.com/r/unixporn/comments/4tfdzu/ram_usage_of_small_window_managers_a_comparison/][RAM Usage of small window managers - a comparison]]

** TWM

- [[https://wiki.archlinux.org/title/twm][Arch Linux Wiki page]]
- [[https://opensource.com/article/19/12/twm-linux-desktop][Get back to basics with the TWM Linux desktop]]

** FVWM

- [[https://wiki.archlinux.org/title/FVWM][Arch Linux Wiki page]]
* Other Links
:PROPERTIES:
:CUSTOM_ID: h-88c07655-f971-4a20-b7f9-3f75d70adacd
:END:

- [[http://informatimago.com/articles/raspberrypi/ccl-sur-qemu.html][CCL on RPi]] (French)
- [[http://thisoldlisp.com/talks/els-2018/][This Old Lisp]]
- [[http://lispm.de/ccl][CCL on Raspberry Pi]], Rainer's tutorial/notes
- [[http://christophe.rhodes.io/notes/blog/feeds/lisp/][Christophe Rhodes on Lisp]]
- [[http://jacek.zlydach.pl/blog/2015-03-07-lisp-on-raspberry-pi-2-part-1-setting-up.html][Lisp on Raspberry Pi, Part 2]]
