#+TITLE: FORTRAN
#+AUTHOR: Alex Nelson
#+EMAIL: pqnelson@gmail.com
#+DATE: <2021-06-03T08:34:00-08:00>
#+LANGUAGE: en
#+OPTIONS: H:5
#+HTML_DOCTYPE: html5
#+INCLUDE: ../org-macros.org
#+HTML_LINK_UP: ./index.html
#+HTML_LINK_HOME: ../index.html
#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="../css/stylesheet.css" />
# Created Thursday June  3, 2021 at  8:34AM

* Overview
:PROPERTIES:
:CUSTOM_ID: h-61887ea9-88da-43df-9d23-a5d04c7bb0c3
:END:

Fortran is the "gold standard" for numerical computation. Since the F90
dialect came about, it has evolved from the "assembly doppleganger" to
something resembling Pascal.

Like Common Lisp, it's case insensitive (unfortunately).

* Tools
:PROPERTIES:
:CUSTOM_ID: h-f4713cbe-d64c-424d-b356-c1aa36a7a9d8
:END:

I am specifically trying to /not/ reinvent the wheel. Towards this end,
I am willing to delegate work to specialized libraries (like LAPACK and
friends).

** Literate Fortran
:PROPERTIES:
:CUSTOM_ID: h-2e5e2386-a108-4f5d-84b5-2fa635dceb93
:END:

If I wanted to write a program in Fortran and include the motivation,
derivation, etc., then a common trick is to use literate programming.
There are a few toolkits available:

- Noweb, a generic tool for literate programming, which works really
  well with LaTeX, and can produce HTML output. The only disadvantage I
  can think of is it doesn't easily handle syntax highlighting.
- [[file:fortran/fweb.org][FWEB]], a fork of WEB specifically for Fortran
- Org-mode, which I prefer least

** Unit Testing Frameworks
:PROPERTIES:
:CUSTOM_ID: h-936d69ba-efa7-41ad-9594-8a8b1d7d805c
:END:

There are about [[http://fortranwiki.org/fortran/show/Unit+testing+frameworks][a dozen frameworks]] for unit testing Fortran code.
One of the tenets of unit testing is to keep reports of test results,
and the only framework producing an artifact (in the form of a file) is
FRUIT.

* References
:PROPERTIES:
:CUSTOM_ID: h-2dd65ecf-064f-408c-80fc-fea932eacea9
:END:

- [[http://fortranwiki.org/fortran/show/HomePage][Fortran Wiki]]
- Best Practices
  - [[https://www.fortran90.org/src/best-practices.html][fortran90.org]]
  - [[https://web.archive.org/web/20101210055225/http://research.metoffice.gov.uk/research/nwp/numerical/fortran90/f90_standards.html][European Standards For Writing and Documenting Exchangeable Fortran 90 Code]]
- Assertion utilities
  - [[http://computer-programming-forum.com/49-fortran/2ffdfd8b0b5b5297.htm][assert.h for Fortran]]
  - [[https://stackoverflow.com/q/21724186][Assertions in Fortran]] (stackoverflow)
- Object Oriented Fortran
  - [[https://web.archive.org/web/20110709203750/http://www.pgroup.com/lit/articles/insider/v3n1a3.htm][part 1]], [[https://web.archive.org/web/20131122082418/http://www.pgroup.com/lit/articles/insider/v3n2a2.htm][part 2]]
- Damian Rouson, Jim Xia, Xiaofeng Xu,\\
  {{{book-title(Scientific Software Design: The Object-Oriented Way)}}}.\\
  Cambridge University Press, 2011.
  - Discusses a number of interesting design patterns unique to
    scientific computation, like encoding differential operators using
    abstract data types in a manner which is independent of numerical
    schemes (so it's more readable, reusable, stable).

** Blogs
:PROPERTIES:
:CUSTOM_ID: h-4e18e195-09ae-45d2-a7d7-dceaafc8a876
:END:

- [[https://degenerateconic.com/][Degenerate Conic]]