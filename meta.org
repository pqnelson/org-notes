#+TITLE: Meta-Notes
#+AUTHOR: Alex Nelson
#+EMAIL: pqnelson@gmail.com
#+DATE: <2020-12-05T17:41:00-08:00>
#+LANGUAGE: en
#+OPTIONS: H:5
#+HTML_DOCTYPE: html5
#+HTML_LINK_UP: ./index.html
#+HTML_LINK_HOME: ./index.html
#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="./css/stylesheet.css" />
# Created Saturday December  5, 2020 at  5:41PM

* Introduction

Notes about these notes.

* Org-Mode

Regarding org-mode commands and quirks.

** LaTeX Macros

I follow this general scheme when adding more LaTeX macros to my
~org-macros.org~ file: add them to a ~latex-macros~ source code
environment, add the following lines to my =~/.emacs.d/init.el= file:

#+begin_src elisp
(add-to-list 'org-src-lang-modes '("latex-macros" . latex))

(defvar org-babel-default-header-args:latex-macros
  '((:results . "raw")
    (:exports . "results")))

(defun prefix-all-lines (pre body)
  (with-temp-buffer
    (insert body)
    (string-insert-rectangle (point-min) (point-max) pre)
    (buffer-string)))

(defun org-babel-execute:latex-macros (body _params)
  (concat
   (prefix-all-lines "#+LATEX_HEADER: " body)
   "\n#+HTML_HEAD_EXTRA: <div style=\"display: none\"> \\(\n"
   (prefix-all-lines "#+HTML_HEAD_EXTRA: " body)
   "\n#+HTML_HEAD_EXTRA: \\)</div>\n"))
#+end_src

** Exporting Source code

If I add to the header of an org file:

#+begin_example
 #+begin_src lang tangle: my-file.lisp ...
#+end_example

Then by default, all source code blocks will be evaluated /as if/
it had =tangle: my-file.lisp=.

*** Keeping the Noweb labels in documentation

If we want to keep the noweb labels inlined in the code blocks when
exporting to HTML or whatever, then we should also add:

#+begin_example
 #+begin_src lang :noweb no-export ...
#+end_example

It appears that the Noweb label can include whitespace, though it
may be useful to use =snake_case=. When we want to define or append
code to a noweb label, we write

#+begin_example
 #+begin_src lang ... :noweb-ref [label]
#+end_example

It seems like it must be the last element in the "begin source"
line.

** Custom Environments ("Blocks")

I can add custom blocks and shortcuts to expand =<xxx= into blocks
with the following elisp:

#+begin_src elisp
(require 'org-tempo)
(setq org-structure-template-alist '(("a" . "export ascii")
                                     ("c" . "center")
                                     ("C" . "comment")
                                     ("e" . "example")
                                     ("E" . "export")
                                     ("h" . "export html")
                                     ("l" . "export latex")
                                     ("q" . "quote")
                                     ("s" . "src")
                                     ("v" . "verse")
                                     ("rmk" . "remark")
                                     ("cor" . "corollary")
                                     ("thm" . "theorem")
                                     ("prop" . "proposition")
                                     ("lem" . "lemma")
                                     ("pz" . "puzzle")
                                     ("xca" . "exercise")
                                     ("ex" . "math-example")
                                     ("eg" . "math-example")
                                     ("d" . "definition")
                                     ("dan" . "danger")
                                     ("pf" . "proof")))
#+end_src

** Publishing

I'd need to add to my =~/.emacs= file

#+begin_src elisp
(require 'ox-publish)
(setq org-publish-project-alist '())
(add-to-list 'org-publish-project-alist
      '("org-notes"
         :base-directory "~/org-notes/"
         :base-extension "org"
         :publishing-directory "~/org-notes/html/"
         :recursive t
         :publishing-function org-html-publish-to-html
         :exclude "\\(html\\|ignore\\)/"
         ))

(add-to-list 'org-publish-project-alist
        '("org-static"
        :base-directory "~/org-notes/"
        :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
        :publishing-directory "~/org-notes/html/"
        :recursive t
        :publishing-function org-publish-attachment
        :exclude "\\(html\\|ignore\\)/"
        ))

(add-to-list 'org-publish-project-alist
             '("all" :components ("all-notes" "org-static")))
#+end_src

We avoid writing the postamble:

#+begin_src elisp
(eval-after-load "ox-html" (setq org-html-postamble nil))
#+end_src

And we can permit evaluating source blocks automatically:

#+begin_src elisp
(setq org-confirm-babel-evaluate nil) ; don't ask for confirmation before evaluating a code block
(setq org-export-babel-evaluate t)
(setq org-export-use-babel t)
#+end_src

** Color Choices

I've used syntax highlighting based off of Github's style. In my
=~/.emacs.d/init.el= file, I've got:

#+begin_src elisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((scheme . t)
   (emacs-lisp . t)
   (lisp . t)
   (C . t)))

(setq org-html-htmlize-output-type 'css) ; export HTML classes & css syling
(setq org-html-htmlize-font-prefix "org-")
(setq org-src-preserve-indentation t)
(setq org-src-fontify-natively t) ; export syntax highlighting
#+end_src

This setup permits overriding the style using a CSS file, prefixing all
the element classes with ~org-*~.

Sarah Rovner-Frydman uses the following color schema:

#+begin_quote
set recolor-darkcolor ~"#B0C6D7"~
set recolor-lightcolor ~"#141D26"~
#+end_quote

I am using PT serif for my main font, Sans Serif Code for the teletype
font,


* Subject Classification

I'm not sure how best to organize my notes. There are a number of
classification systems for the subjects I am interested in studying.
These are too coarse, not quite right, but interesting
nevertheless, so I'm sticking them in my meta-notes.

** Mathematical Subject Classification

- General, foundations
- Discrete mathematics, algebra
- Analysis
- Geometry and Topology
- Applied mathematics, other

** Physics and Astronomy Classification System

- General
- The Physics of Elementary Particles and Fields
- Nuclear Physics
- Atomic and Molecular Physics
- Electromagnetism, Optics, Acoustics, Heat Transfer, Classical
  Mechanics, and Fluid Dynamics
- Physics of Gases, Plasmas, and Electric Discharges
- Condensed Matter: Structure, Mechanical and Thermal Properties
- Condensed Matter: Electronic Structure, Electrical, Magnetic, and
  Optical Properties
- Interdisciplinary Physics and Related Areas of Science and Technology
- Geophysics, Astronomy, and Astrophysics

** ACM Computing Classification System

1. General and reference
2. Hardware
3. Computer System Organization
4. Networks
5. Software and its engineering
6. Theory of computation
7. Mathematics of computing
8. Information Systems
9. Security and Privacy
10. Human-centered computing
11. Computing Methodologies
12. Applied computing
13. Social and professional topics
